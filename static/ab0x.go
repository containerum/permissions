// Code generated by fileb0x at "2018-04-20 22:49:24.007281115 +0300 MSK m=+0.002901792" from config file "b0x.yaml" DO NOT EDIT.
// modification hash(b73135097f2a6e8d975224392c97d082.f7d60b70267ef579d9aad25918a6b087)

package static

import (
	"bytes"
	"compress/gzip"
	"io"
	"net/http"
	"os"
	"path"

	"context"
	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct{}

// FileSwaggerJSON is "swagger.json"
var FileSwaggerJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\x56\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x10\xfa\xbe\x63\x12\x0f\x3b\xf6\x16\xa0\xc0\x16\x60\xc0\x8a\x14\x05\x06\x0c\x3d\x28\x36\xe3\xa8\xb5\x25\x97\x94\x9a\x05\x45\xfe\xfb\x20\x3b\x8e\x25\xc7\xe9\xb2\x6e\xe8\x69\x39\xc5\x32\x49\x3d\xf1\x3d\x3d\xfa\x25\x01\x10\x99\xd1\xec\x2a\x64\x71\x05\xdf\x13\x00\x00\x21\xeb\xba\x54\x99\xb4\xca\xe8\xf4\x81\x8d\x16\x09\xc0\xfd\xc4\xc7\xd6\x64\x72\x97\x5d\x16\xcb\x5b\x59\x14\x48\xe2\x0a\xc4\xc7\xd9\x07\xd1\xac\x29\xbd\x36\xe2\x0a\x5e\xda\xdc\x1c\x39\x23\x55\xfb\x5c\x1f\x75\x83\x54\x29\x66\x65\x34\x03\x23\x3d\xab\x0c\x81\xad\x21\x64\x70\x8c\x04\x84\x6c\x1c\x65\xc8\x20\x75\x0e\xb2\x2c\xcd\x96\xc1\x1a\xa8\xa4\x96\x05\x82\xcc\x32\xe4\x66\xe1\x18\xd8\x6c\x0a\x20\xac\xb2\x25\x0e\xb7\x98\xdf\x2c\x3c\xd8\x7d\x7b\x30\x69\x37\xdc\x23\x4b\xdb\x62\xc7\x05\x00\x51\xa0\x0d\x1e\x4f\xd1\x2f\xd1\x3a\xd2\x07\xa8\x6d\x3a\x8e\xa2\x69\x92\x4d\x8d\xd4\x34\x6d\x91\xfb\xe4\x4f\x68\x97\x5d\xd8\xfc\x90\x1b\x86\xd7\x92\x64\x85\x16\xa9\xef\x7c\xfb\x7b\x09\xfe\x03\x88\xff\x09\xd7\xbe\xde\x7f\x69\x9f\x91\xde\x31\xd2\xe2\xfa\x33\xca\x1c\x49\x04\xf1\xfb\xc9\x1b\x0a\x2d\x4d\x89\x7f\xa1\xd4\xad\x5b\xb1\x55\xd6\x59\xcc\x5b\x78\x51\xb5\xe3\xff\xfb\x24\x5c\x39\xec\x22\x52\x99\x57\x4a\xa7\x5d\x93\x43\x96\x6a\x37\x60\x89\x5d\x55\x49\xda\x79\x00\x73\x66\x55\xe8\x4e\x27\x25\x3e\x63\x09\x6b\x43\x5e\x49\x03\x81\xcd\xe0\x8e\x31\x6f\x5e\xae\x54\x59\x2a\x5d\x40\xed\xa8\x36\x8c\x3c\x7b\x85\xc5\xdb\x7f\x2c\x5e\x58\x4d\xcb\xaa\xb9\x8f\x2b\x93\xef\xc4\x24\x7e\xa7\xf4\xb9\x37\x9c\x6d\xb0\x92\x11\xbf\x27\xe8\x72\x5c\x2b\xad\x3c\x27\x9c\x8e\xf1\xb1\xc4\x27\x87\x6c\x45\x54\x61\x7f\x89\xf8\x8e\x5e\x11\x6c\xd1\x3b\x46\x5b\xff\x8b\x17\x55\xa8\x47\xbb\xab\x9b\x83\xb2\x25\xa5\x8b\xe3\x81\x04\x6a\x57\x45\x22\x10\xda\x68\x0c\xc5\x42\x28\xf3\xe1\x73\x8e\x25\xda\x28\x6a\x4b\x2a\x5e\x30\x5b\xdd\x93\x7a\x1f\x5d\x9b\x16\xe2\xd7\xd5\x03\x66\x76\x0c\xa3\x69\xdf\x1c\x31\xd6\xe4\xf5\x6d\x55\x74\xc3\xbc\xe5\x0f\xbd\xf1\x15\x0a\xc2\xb6\x24\x23\xca\x10\x2a\x1f\x16\x3a\xd3\xb2\xe6\xdd\xda\x50\x25\x3d\x78\xe1\x9c\xca\xc7\x2b\x96\x72\x15\x71\x30\x56\x34\x19\xb2\x1d\x1b\x4c\xa7\x9a\xf9\x88\xc3\xfc\x6e\xb7\xbc\xd4\xb9\x96\x19\x9e\x83\x24\x89\x64\x2c\x75\xa1\x2c\x56\x7c\xa2\xf3\x3e\x23\x24\x72\x54\xba\x61\x3f\x9e\x4d\xe9\xaa\xf7\xdd\x7d\xb4\xa9\xaf\xdd\xc6\xa0\xbf\x83\xb1\x7a\x8b\xd6\x5b\x4b\x9b\x70\x08\x07\xc5\x20\x81\x0e\x0f\x2d\x11\x8d\x59\x33\x5a\xeb\xcd\x3a\x9a\xc1\x3d\x45\xef\x2f\xf4\x64\x40\x87\xf8\x31\x2d\xcc\xb4\x73\xbf\xe8\x6c\x7d\x33\xe2\xe0\x5a\x66\x8f\xb2\x68\xe2\x0b\x65\x67\x99\xd1\x56\x2a\x8d\xe4\xaa\x99\x46\x9b\x66\x9b\xb4\xee\x3f\x6a\xd2\xfa\xb1\x48\x2b\x93\x77\x20\xf6\xc1\x07\x4e\x30\x7b\x0e\x9e\x75\x6a\xdf\x17\x38\xd7\xe0\x0a\x4e\xce\xf0\xe6\x0b\xc2\xe2\xba\xf9\x00\x72\x7e\xe8\x36\x6d\x6a\xe7\xad\x9f\xde\x7d\x62\xd7\x0d\x4f\xda\x34\xac\xd8\x0e\x82\x27\x87\xb4\x13\x91\x92\xa2\x51\xf8\x07\x90\xbb\x9d\xbf\x4d\x7d\xc5\xe9\xe2\x7a\xb8\xf7\xa6\xdd\xe2\xb8\xea\x25\xa7\x08\xbd\x65\x59\x72\x78\x02\x2a\x18\xab\x01\xac\x53\xaf\xf7\x47\x0d\x4d\xbb\xed\x48\x67\xda\x93\x5f\x9d\x67\x80\xdb\xef\xfa\x26\xe4\x5e\x1c\xc9\xfe\x67\x00\x00\x00\xff\xff\xb8\x0b\xd1\xb0\x05\x0c\x00\x00")

func init() {
	if CTX.Err() != nil {
		panic(CTX.Err())
	}

	var err error

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileSwaggerJSON)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "swagger.json", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}

// Code generated by fileb0x at "2018-04-21 18:17:51.357611005 +0300 MSK m=+0.003252379" from config file "b0x.yaml" DO NOT EDIT.
// modification hash(2dd8d91c2ec47dd5dd0eca6699ba3bef.f7d60b70267ef579d9aad25918a6b087)

package static

import (
	"bytes"
	"compress/gzip"
	"io"
	"net/http"
	"os"
	"path"

	"context"
	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct{}

// FileSwaggerJSON is "swagger.json"
var FileSwaggerJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\x58\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x0c\xd8\x1e\x6d\xab\xe8\x31\xb7\x00\x01\xb6\x06\x8a\x76\x91\x60\x8b\x02\x45\x0e\xb4\x34\x56\xb8\x2b\x92\x5a\x7e\x24\x0d\x02\xff\xf7\x82\xa4\x24\x93\xb2\xa4\xd8\x89\x83\xa4\x0b\xfb\x64\x91\x9c\xe1\xe3\xbc\x37\xc3\x8f\xa7\x19\x00\xc9\xa5\xd0\x96\xa3\x26\x17\xf0\xcf\x0c\x00\x80\xd0\xba\xae\x58\x4e\x0d\x93\x22\xfb\xaa\xa5\x20\x33\x80\xdb\xb9\x1b\x5b\x2b\x59\xd8\xfc\xb0\xb1\xfa\x81\x96\x25\x2a\x72\x01\xe4\xd7\xe5\x2f\xc4\xb7\x31\xb1\x91\xe4\x02\x9e\x82\x6d\x81\x3a\x57\xac\x76\xb6\x6e\xd4\x67\x54\x9c\x69\xcd\xa4\xd0\xa0\x51\xdd\xb3\x1c\x41\x1b\xa9\x50\x83\xd5\xa8\x40\xa1\x96\x56\xe5\xa8\x81\x8a\x02\x68\x55\xc9\x07\x0d\x46\x02\xa7\x82\x96\x08\x34\xcf\x51\xfb\x86\x6e\xa0\x9f\x14\x80\x18\x66\x2a\xec\x4f\x71\xf9\x79\xe5\xc0\x6e\xc3\xc2\xa8\xb9\xd3\x3b\x64\x59\x70\xd6\x35\x00\x90\x12\x4d\xf4\xe9\xd6\x67\x39\xa7\xea\xd1\xb9\xbd\x46\x63\x95\x68\x60\x06\x53\x4c\x91\x2c\x1b\x28\xde\x52\xd6\xa8\x7c\xc4\x56\x85\xb3\xfe\x84\xe6\xba\x1d\x77\xd9\x18\xc7\xc3\x6b\xaa\x28\x47\x83\x6a\x17\xf6\xf0\x7b\x8a\xfe\x03\x90\x9f\x15\x6e\x9c\xbf\x9f\xb2\x9d\x45\xf6\x45\xa3\x5a\x5d\xfd\x86\xb4\x40\x45\xa2\xf1\xdb\xf9\x0b\x1c\x5d\xcb\x0a\x4f\xe0\xea\xc6\xae\xb5\x61\xc6\x1a\x2c\x02\xbc\xc4\x5b\xf7\xff\x76\x16\xb7\x34\xb3\x90\x8c\x16\x9c\x89\xac\x8d\x72\x4c\x51\x6d\xc7\x29\xba\xd4\x9a\x95\xa2\x15\x49\x85\xf7\x58\xc1\x46\x2a\x27\xa3\x9e\xba\x96\xf0\x45\x63\xe1\x3b\xd7\xac\xaa\x98\x28\xa1\xb6\xaa\x96\x7a\x9a\xc5\x9b\x33\x8b\x07\x7a\x13\x94\xfb\x64\x5c\xcb\xe2\x91\xcc\xd3\x3e\x26\xc6\x7a\x74\x7e\x87\x9c\x26\xfc\xee\xa1\x2b\x70\xc3\x04\x73\x9c\xe8\x6c\x88\x8f\x6b\xfc\x6e\x51\x1b\x92\x78\xd8\x1e\x23\x3e\x87\x5d\xd7\x34\x47\x9d\x3d\x55\x74\x8d\xd5\x76\xa0\x54\x4c\xe9\xf0\x93\xa2\xc2\x40\xe7\x06\xea\xae\x22\xb9\x7a\xe1\x94\xf8\x8c\xc8\xfe\x68\x4d\xc3\xa2\xce\x12\xfb\x10\x12\x0b\x64\x3c\xaf\xaf\x09\xcc\xbd\xdd\xb0\xe3\x19\xbc\xce\xfa\x58\xdb\x15\x0e\x76\x86\x25\xba\x3d\xed\x99\xca\xda\xda\x91\x02\x2b\x34\x38\xaa\xda\x2b\xdf\xfd\x62\xd9\x06\xf3\xb3\x72\x3f\x8c\x72\x03\x21\xff\x73\xf1\xa6\x95\xf9\x5e\x56\xee\x14\xfb\xaa\xb2\x1c\x7c\x1c\x5f\x93\xff\xf2\x76\x67\x59\xff\xd0\x05\x39\x90\xfc\x81\xaa\xf1\x8b\xd4\x1a\x6c\xcf\x82\x3d\xd7\xe1\x13\xd7\xe1\xee\x2a\x1d\xad\x6f\x77\xa1\x0e\x4b\xfb\xdd\x5d\xbb\xe2\x92\x6c\x1e\x6b\x0f\x40\x1b\xc5\x44\xd9\x21\x20\x28\x2c\x4f\x14\x48\x84\x14\x18\x2b\x55\x21\x2d\xfa\xdf\x4d\xda\x44\xad\x0f\x8a\xa5\x0d\xf2\x41\xec\x14\x75\x9b\xec\x20\x01\xe2\x9f\xeb\xaf\x98\x9b\x21\x8c\x32\xf4\x74\x18\x6b\xe5\x52\xcb\xb0\xe4\x0e\x0a\x40\xf6\x36\x9e\x09\xfe\xe3\xb0\xcc\x06\xf8\x25\xac\xe8\x3b\x1a\x09\x99\xef\xdb\x48\xc5\xa9\x03\x4f\xac\x65\xc5\xb0\xc7\xc0\xf5\xb4\xd3\x59\x9f\xed\x74\xaf\x9d\x52\x6d\x14\xb8\x9e\x16\x83\x95\xcb\xc2\xc4\x02\x98\x06\x0a\xaa\xf9\x08\x41\xf6\x97\x6f\xcf\xa6\xbb\x7d\xef\x3f\xec\xf8\x7e\x57\xe9\x76\x6c\x1c\xcb\x92\xb3\x6e\xe4\x9f\x44\xa2\x07\xba\x79\xc4\xba\x00\x6d\xd4\x86\x1b\x40\x4e\x59\x9a\x29\x93\x84\xfc\xbb\x28\xe5\xa2\xcd\x32\xb7\x74\x97\x90\x03\xe1\xed\xe0\x26\x06\x23\x11\x23\xe9\xe8\x9a\xe6\xdf\x68\xe9\x0d\x4a\x66\x96\xb9\x14\x86\x32\x81\xca\xf2\xa5\x40\x93\xe5\x77\xd9\x6e\x87\xd0\x59\xfd\xad\xcc\xb8\x2c\x5a\xbd\xb5\x94\xa6\x64\xa6\xcf\x2a\xc7\x86\xb6\xbb\x25\x8c\xa9\x8c\x2a\x45\xd3\xd2\x49\x98\x41\xae\xf7\xea\xe6\x64\xd6\x34\x99\x3a\x58\x9b\x62\xc1\x87\x6d\xf2\x1d\xb1\x0c\xe6\xd0\xe8\x51\x65\x3c\x81\x6e\xd0\x1c\x9e\x3d\x1a\xcd\xdb\x25\xcf\x49\x4b\xdc\x58\x26\x1e\x56\xe8\x06\x12\xf2\x75\x49\x37\x14\xe5\xb7\xc8\xb8\xa9\xf7\xa9\x13\x6b\x20\x79\x96\x7e\x4f\xd6\x8f\x88\x3c\xbe\x49\xec\xa3\xf7\xfe\xe8\xa0\xdb\x9c\x51\xf6\xcf\x8a\x07\x9c\x54\x7a\x5b\xee\x7c\x84\x37\xe7\x10\x56\x57\x3e\x0f\xad\x00\x9a\xfb\x30\x85\x17\xe8\x82\x33\xb1\x33\x6c\xa3\xe1\x48\x5b\xc4\x1e\xc3\x79\xec\xbb\x45\xf5\x98\x2a\x29\x39\x77\xbf\x02\x72\x3b\xf3\xdf\x0b\xe7\x71\xb1\xba\xea\xcf\x7d\x17\xa6\xe8\x5a\x9d\xe4\x98\x42\x77\x44\x31\xca\xe2\x1e\xa8\xe8\x0c\x1f\xc1\xda\x3f\xdb\x25\xc5\xc8\x09\xcd\x47\xa4\x3d\xa4\xcd\x9f\x5b\x4f\x0f\xb7\x9b\xf5\x45\xc8\x9d\x38\x66\xdb\xff\x02\x00\x00\xff\xff\xcd\x6f\x6a\x1b\x14\x1b\x00\x00")

func init() {
	if CTX.Err() != nil {
		panic(CTX.Err())
	}

	var err error

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileSwaggerJSON)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "swagger.json", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}

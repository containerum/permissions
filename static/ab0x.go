// Code generated by fileb0x at "2018-04-24 18:22:40.780240452 +0300 MSK m=+0.003221582" from config file "b0x.yaml" DO NOT EDIT.
// modification hash(b0829982734f1ca8e3fa9e40f90bdeb4.f7d60b70267ef579d9aad25918a6b087)

package static

import (
	"bytes"
	"compress/gzip"
	"io"
	"net/http"
	"os"
	"path"

	"context"
	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct{}

// FileSwaggerJSON is "swagger.json"
var FileSwaggerJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\x1b\x5b\x6f\xdb\x36\xf7\xdd\xbf\x82\xd0\xf7\x3d\x36\x71\x77\xc1\x1e\xfa\x16\x24\x43\x67\xac\x5d\x83\xa4\x29\x06\x0c\x85\x41\x4b\xc7\x0a\x5b\x89\x54\x49\x2a\x49\x17\xe4\xbf\x0f\x24\x75\x21\x65\x52\xb6\x15\x2b\x71\x5b\xf7\xa9\x11\x79\x2e\x3c\xf7\x73\x48\xdf\x4f\x10\x8a\x62\x46\x45\x99\x83\x88\x5e\xa1\x7f\x26\x08\x21\x14\xe1\xa2\xc8\x48\x8c\x25\x61\x74\xfa\x49\x30\x1a\x4d\x10\xfa\xf8\x42\xed\x2d\x38\x4b\xca\x78\xb3\xbd\xe2\x16\xa7\x29\xf0\xe8\x15\x8a\x7e\x39\x7e\x19\xe9\x6f\x84\x2e\x59\xf4\x0a\xdd\x1b\xd8\x04\x44\xcc\x49\xa1\x60\xd5\xae\x73\xe0\x39\x11\x82\x30\x2a\x90\x00\x7e\x43\x62\x40\x42\x32\x0e\x02\x95\x02\x38\xe2\x20\x58\xc9\x63\x10\x08\xd3\x04\xe1\x2c\x63\xb7\x02\x49\x86\x72\x4c\x71\x0a\x08\xc7\x31\x08\xfd\xa1\xd9\xa8\x89\x22\x14\x49\x22\x33\xe8\x92\x38\x39\x9f\x29\x66\x1f\xcc\xc1\xb0\xbc\x16\x2d\x67\x53\x83\xac\xf9\x80\x50\x94\x82\xb4\xfe\x54\xe7\x2b\xf3\x1c\xf3\xaf\x0a\xed\x05\xc8\x92\xd3\x8a\x4d\x03\x0a\x2e\x27\xc7\x15\x2b\x1a\x92\x15\xc0\xb5\xc4\x66\x89\x82\x7e\x0d\xf2\xa2\xde\x77\x52\x01\xdb\xdb\x0b\xcc\x71\x0e\x12\x78\x2b\x76\xf3\xef\xde\xfa\x3f\x42\xd1\xff\x39\x2c\x15\xbe\xff\x4d\x5b\x88\xe9\x95\x00\x3e\x3b\xfb\x03\x70\x02\x3c\xb2\xf6\x3f\xbc\x18\x80\xe8\x82\x65\xb0\x03\x54\x97\xe5\x42\x48\x22\x4b\x09\x89\x61\xcf\xc1\xd6\xfc\xff\xe3\xc4\xfe\x52\x51\x89\xa6\x38\xc9\x09\x9d\xd6\x52\xb6\x55\x54\x94\x61\x15\x9d\x08\x41\x52\x5a\x1b\x49\x06\x37\x90\xa1\x25\xe3\xca\x8c\x3a\xd6\x75\x8c\xae\x04\x24\x7a\x71\x41\xb2\x8c\xd0\x14\x15\x25\x2f\x98\xe8\xd7\xe2\xe5\x41\x8b\x1b\x62\xa3\x38\xd7\xce\xb8\x60\xc9\xd7\xe8\x85\xbb\x46\x68\x68\x85\xc3\x97\x92\x70\x50\xb2\x96\xbc\x84\xce\xaa\x88\xaf\x21\xc7\x8e\xf6\x57\x78\x4f\x60\x49\x28\x51\x1a\x13\x53\x9f\xb6\x2e\xe0\x4b\x09\x42\x46\x0e\x86\x87\xed\x4d\x53\x9d\x4f\x14\x38\xee\x18\x27\x13\x61\xeb\x3c\xe5\x80\x25\xa0\x06\x12\xdd\x12\x79\xcd\x4a\x59\x5b\x60\x9f\xe1\x9d\x28\xa2\x06\xc1\x5f\x35\xfc\xc1\xf0\xf6\xd5\xf0\x1a\x15\x59\x6a\xdb\xc6\xf0\x2c\xc5\x72\x10\x05\xa3\x6e\x0c\xd4\x0b\x3f\xbf\xfc\x69\x85\xa1\x6e\xb2\x6d\x4d\x2d\xd6\x3c\x24\x41\x21\x46\x09\x2c\x71\x99\xc9\xb5\x28\x81\x73\xc6\xfd\xa1\xfc\xc1\xef\x2f\xad\xa7\x4c\xef\x33\xbc\x80\xec\xc1\x93\x78\xfb\xa2\xfa\x6b\x8e\xa9\xb4\xdc\xa6\x68\xf2\xbb\xca\xbe\x2a\xae\xaf\x09\xd9\xad\x3a\x0c\xdd\x83\xdf\xec\x7f\xc0\x36\xaa\x5a\xef\x34\x3d\x27\xea\x58\x6e\x63\x05\x48\x5b\x61\xf7\x24\xf5\xf9\xbd\x8b\x46\x00\xaa\x7e\x5c\x23\x80\xfe\x44\x52\xc3\x46\x09\x64\x20\x21\x68\xf1\x67\x7a\x79\xb0\xc9\x1b\xf0\x83\xd5\x7f\x23\x56\x6f\xd4\xf5\x5d\x1b\xbe\x9b\x11\x6e\x58\xa6\x7a\xd1\x47\xa5\x03\x83\x63\xfb\x5c\xf0\x41\xc3\x1d\x5c\xe2\x07\x4e\x04\xc6\x04\xbe\x99\x2c\x30\xc8\xd2\x0d\xec\xc1\xd8\x0f\xf1\x7f\x8f\xe2\x7f\x33\x88\xb3\x4e\xdf\x8e\xe3\xcc\xc1\xdf\xc0\x0d\x64\x76\x2a\x90\x5f\x0b\xcd\x9e\x90\x9c\xd0\xb4\xe1\x22\x02\x5a\xe6\x8e\xf5\x46\x94\x51\xa7\x27\xe6\x80\x93\xee\xdf\x95\xcb\x59\x5f\x6f\x39\x71\x3f\xb0\x5b\xda\x5a\xe3\x47\x27\x73\x19\x16\xdf\x2d\x3e\x41\x2c\x7d\x3c\x32\xb3\xd2\xf0\x58\x70\xe5\x96\x92\x74\xba\xb7\x68\x25\xe1\xf5\x58\x87\x2d\x96\x89\x47\xfb\x11\x49\xba\x88\x02\x22\xd3\x6b\x4b\xc6\x73\xac\x98\x8f\xca\x92\x24\x7e\x8c\xc6\x12\xfa\x91\xae\xe9\xfa\xfa\x6c\xda\x12\x5c\xc7\x52\x0d\x94\xf2\x60\x07\x02\x11\x81\x30\xe2\xd5\x1f\x46\xc8\x7a\x74\xa7\xb5\x49\x68\xea\x19\x0b\xeb\x75\x15\x25\x5b\x6d\x6c\xab\x25\x05\x5d\x39\xc7\x00\xf1\x42\x8e\x89\xeb\x4e\xd1\xdd\x51\xca\x8e\x6a\x77\x53\xa7\x54\x9e\xe9\x91\x64\xc3\x99\x03\x10\x10\x4e\xe4\xee\x2e\x70\xfc\x19\xa7\x1a\x20\x25\xf2\x38\x66\x54\x62\x42\x81\x97\xf9\x31\x05\x39\x8d\xaf\xa7\x6d\x22\x11\xd3\xe2\x73\x3a\xcd\x59\x52\x9b\x56\xad\xbd\x76\xc4\x14\xd6\x55\x1b\x55\xcc\xc2\x02\x44\xdb\xb0\x0c\x17\x7a\x5c\x94\x21\x79\x13\x2a\x21\xb5\x14\xda\x11\x38\xa1\xf2\xb7\x5f\x7b\x04\x7e\x7a\x7e\xe5\x37\x77\x33\x1b\x99\x4b\x32\x54\xd5\x09\x96\x70\xa4\xc1\x7b\xa8\x6b\x22\xef\x89\xa3\x70\x8b\x09\x13\x98\x46\x66\xc2\x98\xd0\x3a\x26\x82\xf1\x64\xc1\x58\x06\x98\xae\x25\x90\x8c\x10\xa8\xc2\x34\xed\x64\xbf\x6d\x14\x0b\x63\x7d\xa3\xa1\xbd\x88\x73\x7c\x37\x87\x3b\xa9\x82\x43\x36\xaf\xee\xb0\xc4\x48\x46\xfb\x16\xdf\xfd\x7e\x27\x2f\x6b\x22\x41\x7e\x14\x99\x27\xe2\x67\x46\x37\xe0\x47\x72\xbc\x5c\x92\x78\x3c\x2e\xde\x57\x04\xbc\x1c\xe8\x14\x3e\x57\xf1\x7b\x3e\x92\xd1\xbd\x53\x14\xba\xa5\xa6\xcd\x02\xc7\xf9\x48\x87\xbf\x38\x79\xeb\x27\x29\x31\x27\xcb\xe5\x58\x27\x7e\xaf\xb1\x87\x8e\xab\x64\x1d\xb4\x39\xcc\x39\x76\x6b\xe8\x88\x48\xc8\xc5\xea\xb0\xd9\x5f\x02\xb5\x17\xba\xe1\xf9\xb5\xc3\xab\x75\x03\xec\x67\xb7\x9a\x40\x8c\xc5\xb0\xe9\xbb\x36\x64\xf6\x43\xc5\xcb\xba\x3a\x60\xb7\x99\xdd\x73\x33\xb1\x41\xae\x5f\x85\x42\x15\x1f\x02\xb5\xed\x98\xae\xbd\x74\x56\x55\xb5\x59\xf0\xbe\xeb\x9b\x2a\x12\xc6\xce\x26\x7b\x94\x48\x0e\x39\x44\x73\x00\x39\xd3\x73\x98\x51\x88\x1b\xe4\x4f\xe2\xf2\x56\xf4\x0c\x7b\x78\xbb\x09\x71\x28\x38\x08\xa0\x52\x20\x42\xcd\x91\xd4\x67\xbc\x50\xae\xab\x5f\x51\xb8\xa3\xa8\xba\xe3\x1a\xee\xce\x3b\x6d\x87\x0d\xb2\xb9\x7e\xfc\x31\x8f\xaf\x31\x4d\xc7\xae\xaa\x2d\x96\x4e\x35\xbd\x70\x81\xbd\x17\xad\xc6\x67\x42\x93\xc1\x91\xac\x6e\xe9\xff\x54\x48\xfc\x91\x92\xa5\x84\x0e\xc6\xaf\x6a\xaa\x37\x1a\x83\x17\x39\x85\xdb\xb9\xad\xe1\x1d\x19\x8d\xb2\xe8\xf9\x13\xf7\x27\xb5\xdf\x8c\x45\xb7\xd6\x54\x5f\xc9\xb6\x25\xed\x15\x4d\x39\xb8\x47\x8c\x61\xee\x20\xc9\x7d\x73\xb3\x6d\xb4\xa1\x9e\xe1\xc6\x4e\xab\x3f\x67\x4a\xe8\x7f\x29\xb1\x52\x8a\x3e\x23\x2f\xde\xf9\x5d\xf0\x02\x26\x9c\x42\x2e\x41\x6e\x3e\xb9\x13\x20\xc7\x1b\xdc\xed\x34\x9f\xec\xd9\x14\xd0\x27\xe5\x31\x46\x80\x7d\x6f\xe7\x76\x6c\x03\xce\x83\xda\xe7\xd4\xfa\x16\x92\x87\x51\x65\x2f\x19\x37\x48\x82\x72\x36\x3b\xac\xd1\x6b\xd5\xd1\xea\xb7\xd4\x0a\x76\xb0\x18\x9f\x38\x0b\x92\x62\x07\x5d\x78\xe8\x6e\xa2\xb7\xef\x9e\x9d\x07\x7a\x8f\x6d\xbd\xdd\xc1\xda\x71\x66\x27\xdf\xeb\x47\xf4\x63\x75\x55\x17\x35\x7a\x2f\x71\x41\xfe\x85\x91\x08\x5f\x2a\xd4\xa1\xd0\x99\x8c\x44\xf4\x4a\x84\xa6\xcc\x3f\xec\x68\xe7\x43\xb7\x90\x08\xbc\x7b\xe8\xc6\x8c\xc7\x44\x5c\x49\x6e\x60\xf8\x6d\xc1\x89\x81\xf7\x77\x4a\xb8\xc0\x31\x91\x63\x35\xe0\xa7\x35\xfa\xc3\x8d\xd0\x33\xde\x08\xa5\x59\x29\x24\xf0\xf9\xa3\x22\xee\x6b\x83\x24\x1c\x78\xbf\x97\x7b\xa7\xa6\x71\x19\xab\x63\x6c\xc6\xbc\xa1\xa3\xed\xc3\xbd\xca\xb3\x66\x51\x53\x5c\x8d\x75\xf8\xaa\xaa\x0b\x1d\xfd\x70\xbf\xd3\x7f\xbf\x33\x46\x6e\xb5\x7e\x3b\x68\x3d\x99\xab\x5e\x2c\xad\xbe\x3a\xdb\xe0\xdd\x52\x40\x21\xdd\x64\xad\x10\xa2\xd9\x99\xee\x8c\x4b\x8a\x54\xaa\x65\xd4\xdc\xac\xe8\x1f\x20\xb5\x80\xb5\x50\x94\x8a\x8e\x6c\x8c\xe6\xed\xd6\x97\x12\xea\x49\x73\x5d\x29\x38\x2f\xf8\x1e\xc1\x72\x4d\xf9\xef\x23\x85\xf1\x68\x76\xd6\xa5\x7d\x6d\x48\x34\x5f\x7d\x6f\xc6\x6c\xa6\xac\xd7\x80\x16\x5b\xab\x2f\xbd\x9c\xf1\x80\x2a\x44\xb4\x44\x26\x9d\x5f\xcf\x04\xcf\xd3\xe1\x5b\x51\x1d\xc4\xb9\x32\x8e\xc9\xc3\x7f\x01\x00\x00\xff\xff\xc1\x97\x0b\x2a\x60\x3b\x00\x00")

func init() {
	if CTX.Err() != nil {
		panic(CTX.Err())
	}

	var err error

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileSwaggerJSON)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "swagger.json", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}

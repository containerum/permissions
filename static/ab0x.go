// Code generated by fileb0x at "2018-04-25 09:16:39.283422595 +0300 MSK m=+0.004121484" from config file "b0x.yaml" DO NOT EDIT.
// modification hash(a22cbe722bd92c09809537189d72eafc.962bd45cf7a08315b04bf6bfd3338b74)

package static

import (
	"bytes"
	"compress/gzip"
	"io"
	"net/http"
	"os"
	"path"

	"context"
	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct{}

// FileSwaggerJSON is "swagger.json"
var FileSwaggerJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\x5b\x4b\x73\xdb\x36\x10\xbe\xfb\x57\x60\xd8\x1e\x63\x33\x7d\x4c\x0f\xb9\x79\x9c\x4e\xea\x69\xd2\x78\xec\x38\x97\x4e\x46\x03\x91\x2b\x1a\x09\x09\x30\x00\x68\xd9\xf5\xe8\xbf\x77\x00\xf0\x01\x50\x00\xf5\x88\x68\xcb\x89\x72\xb2\x48\xee\xee\x87\x7d\x62\x17\xc8\xc3\x11\x42\x51\xc2\xa8\xa8\x0a\x10\xd1\x2b\xf4\xef\x11\x42\x08\x45\xb8\x2c\x73\x92\x60\x49\x18\x8d\x3f\x0b\x46\xa3\x23\x84\x3e\xbd\x50\xdf\x96\x9c\xa5\x55\xb2\xde\xb7\x62\x8e\xb3\x0c\x78\xf4\x0a\x45\xbf\x9d\xbc\x8c\xf4\x33\x42\x67\x2c\x7a\x85\x1e\x0c\x6d\x0a\x22\xe1\xa4\x54\xb4\xea\xab\x0b\xe0\x05\x11\x82\x30\x2a\x90\x00\x7e\x4b\x12\x40\x42\x32\x0e\x02\x55\x02\x38\xe2\x20\x58\xc5\x13\x10\x08\xd3\x14\xe1\x3c\x67\x73\x81\x24\x43\x05\xa6\x38\x03\x84\x93\x04\x84\x7e\xd0\x7e\xa8\x85\x22\x14\x49\x22\x73\xe8\x8b\x38\xbd\x38\x57\x60\x17\x66\x61\x58\xde\x88\x0e\x59\x6c\x98\xb5\x0f\x10\x8a\x32\x90\xd6\x4f\xb5\xbe\xaa\x28\x30\xbf\x57\x6c\x2f\x41\x56\x9c\xd6\x30\x0d\x29\xb8\x48\x4e\x6a\x28\x9a\x92\x95\xc0\xb5\xc6\xce\x53\x45\xfd\x06\xe4\x65\xf3\xdd\x69\x4d\x6c\x7f\x5e\x62\x8e\x0b\x90\xc0\x3b\xb5\x9b\x7f\x0f\xd6\xdf\x08\x45\x3f\x73\x98\x29\x7e\x3f\xc5\x1d\x45\x7c\x2d\x80\x9f\xbf\xfe\x0b\x70\x0a\x3c\xb2\xbe\x5f\xbc\xd8\x82\xd1\x25\xcb\x61\x07\xac\xae\xaa\xa9\x90\x44\x56\x12\x52\x03\xcf\xe1\xd6\xfe\xfd\xe9\xc8\x7e\x52\x4b\x89\x62\x9c\x16\x84\xc6\x8d\x96\x6d\x13\x95\x55\xd8\x44\xa7\x42\x90\x8c\x36\x4e\x92\xc3\x2d\xe4\x68\xc6\xb8\x72\xa3\x9e\x77\x9d\xa0\x6b\x01\xa9\x7e\x39\x25\x79\x4e\x68\x86\xca\x8a\x97\x4c\x0c\x5b\xf1\xea\x60\xc5\x35\xb9\x51\x5c\xe8\x60\x9c\xb2\xf4\x3e\x7a\xe1\xbe\x23\x34\xf4\x86\xc3\xd7\x8a\x70\x50\xba\x96\xbc\x82\xde\x5b\x91\xdc\x40\x81\x1d\xeb\x2f\x61\x4f\x61\x46\x28\x51\x16\x13\xb1\xcf\x5a\x97\xf0\xb5\x02\x21\x23\x87\xc3\x62\x73\xd7\x54\xeb\x13\x25\x4e\x7a\xce\xc9\x44\xd8\x3b\xcf\x38\x60\x09\xa8\xa5\x44\x73\x22\x6f\x58\x25\x1b\x0f\x1c\x72\xbc\x53\x25\xd4\x30\xf8\xa7\xa1\x3f\x38\xde\xbe\x3a\x5e\x6b\x22\xcb\x6c\x9b\x38\x9e\x65\x58\x0e\xa2\x64\xd4\xcd\x81\xfa\xc5\xaf\x2f\x7f\x59\x02\xd4\x2f\xb6\x9d\xab\x25\x1a\x43\x1a\x54\x62\x94\xc2\x0c\x57\xb9\x5c\xc9\x12\x38\x67\xdc\x9f\xca\x17\xfe\x78\xe9\x22\x25\x7e\xc8\xf1\x14\xf2\x85\xa7\xf0\x0e\x65\xf5\x37\x1c\x53\x69\x85\x4d\xd9\xd6\x77\x55\x7d\x55\x5e\x5f\x91\xb2\x3b\x73\x18\xb9\x87\xb8\xd9\xff\x84\x6d\x4c\xb5\x3a\x68\x06\x56\xd4\xf3\xdc\xd6\x0b\x90\xf6\xc2\xfe\x4a\x9a\xf5\x7b\x5f\x1a\x05\xa8\xfd\xe3\x0a\x05\x0c\x17\x92\x86\x36\x4a\x21\x07\x09\x41\x8f\x7f\xad\x5f\x6f\xed\xf2\x86\xfc\xe0\xf5\xcf\xc4\xeb\x8d\xb9\xbe\x6b\xc7\x77\x2b\xc2\x2d\xcb\x55\x2f\xfa\x4d\xe5\xc0\xf0\xd8\xbc\x16\x7c\xd4\x74\x87\x90\xf8\x81\x0b\x81\x71\x81\x67\x53\x05\xb6\xf2\x74\x43\x7b\x70\xf6\x43\xfe\xdf\xa3\xfc\xdf\x0e\xe2\xac\xd5\x77\xe3\x38\xb3\xf0\xb7\x70\x0b\xb9\x5d\x0a\xe4\x7d\xa9\xe1\x09\xc9\x09\xcd\x5a\x14\x11\xd0\xaa\x70\xbc\x37\xa2\x8c\x3a\x3d\x31\x07\x9c\xf6\x7f\xd7\x21\x67\x3d\x9d\x73\xe2\x3e\x60\x73\xda\x79\xe3\x27\xa7\x72\x19\x88\xef\xa7\x9f\x21\x91\x3e\x8c\xcc\xbc\x69\x31\x96\x5c\x85\xa5\x24\xbd\xee\x2d\x5a\x2a\x78\x03\xde\x61\xab\xe5\xc8\x63\xfd\x88\xa4\x7d\x46\x01\x95\xe9\x77\x33\xc6\x0b\xac\xc0\x47\x55\x45\x52\x3f\x47\xe3\x09\xc3\x4c\x57\x74\x7d\x43\x3e\x6d\x29\xae\xe7\xa9\x86\x4a\x45\xb0\x43\x81\x88\x40\x18\xf1\xfa\x87\x51\xb2\x1e\xdd\x69\x6b\x12\x9a\x79\xc6\xc2\xfa\xbd\xca\x92\x9d\x35\x36\xb5\x92\xa2\xae\x83\x63\x0b\xf5\x42\x81\x89\x1b\x4e\xd1\xdd\x71\xc6\x8e\x9b\x70\x53\xab\x54\x91\xe9\xd1\x64\x8b\xcc\x21\x08\x28\x27\x72\xbf\x2e\x71\xf2\x05\x67\x9a\x20\x23\xf2\x24\x61\x54\x62\x42\x81\x57\xc5\x09\x05\x19\x27\x37\x71\x57\x48\x44\x5c\x7e\xc9\xe2\x82\xa5\x8d\x6b\x35\xd6\xeb\x46\x4c\x61\x5b\x75\x59\xc5\xbc\x98\x82\xe8\x1a\x96\xed\x95\x9e\x94\x55\x48\xdf\x84\x4a\xc8\x2c\x83\xf6\x14\x4e\xa8\xfc\xe3\xf7\x01\x85\x9f\x5d\x5c\xfb\xdd\xdd\xcc\x46\x26\x92\x6c\x6b\xea\x14\x4b\x38\xd6\xe4\x03\xd2\xb5\x90\x0f\xc4\x31\xb8\x05\xc2\x24\xa6\x91\x41\x18\x17\x5a\x05\x22\x98\x4f\xa6\x8c\xe5\x80\xe9\x4a\x01\xe9\x08\x89\x2a\x2c\xd3\x2e\xf6\x9b\x66\xb1\x30\xd7\xb7\x9a\xda\xcb\xb8\xc0\x77\x13\xb8\x93\x2a\x39\xe4\x93\xfa\x0c\x4b\x8c\xe4\xb4\xef\xf0\xdd\x9f\x77\xf2\xaa\x11\x12\xc4\xa3\xc4\x3c\x12\x9e\x73\xba\x06\x1e\xc9\xf1\x6c\x46\x92\xf1\x50\x7c\xa8\x05\x78\x11\xe8\x12\x3e\x51\xf9\x7b\x32\x92\xd3\xbd\x57\x12\xfa\x5b\x4d\x1b\x02\xc7\xc5\x48\x8b\xbf\x3c\x7d\xe7\x17\x29\x31\x27\xb3\xd9\x58\x2b\xfe\xa0\xb9\x87\x96\xab\x74\x1d\xf4\x39\xcc\x39\x76\xf7\xd0\x11\x91\x50\x88\xe5\x61\xb3\x7f\x0b\xd4\x1d\xe8\x86\xe7\xd7\x0e\x56\xeb\x04\xd8\x0f\xb7\x9e\x40\x8c\x05\xd8\xf4\x5d\x6b\x82\xfd\x58\x63\x59\xb5\x0f\xd8\x6d\x65\xf7\x9c\x4c\xac\x51\xeb\x97\xa9\x50\x8d\x43\xa0\xae\x1d\xd3\x7b\x2f\x5d\x55\xd5\xde\x2c\x78\xde\xf5\xac\x36\x09\x63\x57\x93\x3d\x2a\x24\x87\x1a\xa2\x11\x40\xc1\xf4\x1c\x66\x14\xe1\x86\xf9\xa3\x84\xbc\x95\x3d\xc3\x11\xde\x7d\x84\x38\x94\x1c\x04\x50\x29\x10\xa1\x66\x49\xea\x31\x9e\xaa\xd0\xd5\xb7\x28\xdc\x51\x54\xd3\x71\x6d\x1f\xce\x3b\x6d\x87\x0d\xb3\x89\xbe\xfc\x31\x49\x6e\x30\xcd\xc6\xde\x55\x5b\x90\xce\xb4\xbc\xf0\x06\x7b\x2f\x5a\x8d\x2f\x84\xa6\x5b\x67\xb2\xa6\xa5\xff\x5b\x31\xf1\x67\x4a\x96\x11\xba\x35\x7f\xb5\xa7\x7a\xab\x39\x78\x99\x53\x98\x4f\x6c\x0b\xef\xc8\x69\x94\x47\x4f\x1e\xb9\x3f\x69\xe2\x66\x2c\xb9\x8d\xa5\x86\xb6\x6c\x1b\xca\x5e\xb2\x94\xc3\x7b\xc4\x1c\xe6\x0e\x92\xdc\x3b\x37\x9b\x66\x1b\xea\x19\x6e\xec\x74\xf7\xe7\x4c\x09\xfd\x37\x25\x96\xb6\xa2\x4f\x88\xc5\x3b\xbf\x0b\x1e\xc0\x84\x4b\xc8\x15\xc8\xf5\x27\x77\x02\xe4\x78\x83\xbb\x9d\xd6\x93\x3d\x9b\x02\xfa\xb4\x3c\xc6\x08\x70\xe8\xee\xdc\x8e\x7d\xc0\xb9\x50\xfb\x94\x56\xdf\x40\xf3\x30\xaa\xee\x25\xe3\x86\x49\x50\xcf\xe6\x0b\x6b\xf4\x5a\x77\xb4\xfa\x2e\xb5\xa2\xdd\x5a\x8d\x8f\x5c\x05\x49\xb9\x83\x2e\x3c\x74\x36\x31\xd8\x77\x9f\x5f\x04\x7a\x8f\x4d\xa3\xdd\xe1\xda\x0b\x66\xa7\xde\xeb\x4b\xf4\x63\x75\x55\x97\x0d\x7b\xaf\x70\x41\xfe\x83\x91\x04\x5f\x29\xd6\xa1\xd4\x99\x8e\x24\xf4\x5a\x84\xa6\xcc\x3f\xec\x68\xe7\x63\x7f\x23\x11\xb8\xf7\xd0\xcf\x19\xdf\x92\x71\x25\xb9\x85\xed\x4f\x0b\x4e\x0d\xbd\xbf\x53\xc2\x25\x4e\x88\x1c\xab\x01\x3f\x6b\xd8\x1f\x4e\x84\x9e\xf0\x44\x28\xcb\x2b\x21\x81\x4f\xbe\x29\xe3\xbe\x31\x4c\xc2\x89\xf7\x7b\x39\x77\x6a\x1b\x97\xb1\x3a\xc6\x76\xcc\x1b\x5a\xda\x3e\x9c\xab\x3c\x69\x15\x35\x9b\xab\xb1\x16\x5f\xef\xea\x42\x4b\x3f\x9c\xef\x0c\x9f\xef\x8c\x51\x5b\xad\xff\x3b\x68\x5d\x99\xab\x6f\x2c\x2d\xdf\x3a\xb3\x8a\x6f\xb3\xd4\x5b\xa0\x29\xe3\x71\x40\x76\x25\x49\x2e\xe2\x1b\x29\x4b\xf5\x57\x5c\xff\x77\xca\x93\xcf\x82\xd1\x75\x2e\xb8\x35\xb5\xdf\xb9\x93\xb7\x31\x08\x5c\x92\xe3\x0c\x4b\x98\xe3\x7b\xad\x80\x1a\x94\xe6\x26\xc2\x98\x96\x2f\x02\xda\x70\xac\x9b\x7d\x8f\x09\xa8\x7f\xa1\x50\x5b\xf0\x68\xf1\x7f\x00\x00\x00\xff\xff\xe2\x61\x43\x51\x05\x3b\x00\x00")

// FileVendorGitContainerumNetChAPIGatewayPkgUtilsHeadersSwaggerJSON is "vendor/git.containerum.net/ch/api-gateway/pkg/utils/headers/swagger.json"
var FileVendorGitContainerumNetChAPIGatewayPkgUtilsHeadersSwaggerJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xbc\x93\xcf\x4a\xc3\x40\x10\x87\xef\x7d\x8a\x61\xce\x46\x04\x6f\xb9\x89\x3d\x34\x17\x29\x45\x45\x10\x0f\xa3\x99\xc6\xc5\xec\x26\xdd\x3f\x88\x48\xdf\x5d\x66\x37\xb4\x8a\x90\x8d\x85\x78\xc8\x61\x7f\xf3\x25\xf9\x32\x33\xf9\x5c\x00\xa0\x7b\xa7\xa6\x61\x8b\x25\xe0\xe5\xf9\x05\x9e\x49\xd6\x93\x25\xcd\x9e\xad\xc3\x12\x84\x02\xc0\x0d\xef\x02\x3b\x5f\x2d\x57\x4c\x75\xe4\x53\x01\x00\x0d\x69\x96\xfb\x1f\x8a\x01\x2a\xaa\x65\x7c\x50\xac\xfa\x8f\x3e\x56\x9d\xb7\xca\x34\xc7\x7c\xdb\x59\x4d\x5e\x2a\x21\xa8\xfa\x98\x2b\x23\xd9\x6b\x7a\xcb\x21\xb5\xbc\x0b\xca\x72\x8d\x25\x78\x1b\x38\xc6\xfb\x54\xc5\x3b\xc7\x76\xdc\x4b\x88\x7f\x96\x1a\x5a\x71\x43\x9a\xa7\x74\x4c\xb8\xbc\xde\x69\xbd\xb9\x6e\x15\x1b\x9f\xed\x4f\xc2\xe6\x92\xb8\x6a\xa6\x38\x44\x6a\x0e\x85\xf4\x71\xd5\x7a\xcc\x20\x31\x45\xb5\x3e\x55\xe0\xb8\x3d\xaa\x9f\xa6\x75\xdb\xbd\xb1\x19\xdf\xdd\x88\x4c\x5a\xde\x9c\xd4\xcf\x95\xce\x0d\x6c\xd3\xb5\x9c\x9d\x97\x40\x79\x31\x36\x41\x63\x09\x8f\xc3\x19\x00\x83\xfb\xa6\x08\x80\x54\x6b\x65\x70\x38\x3f\x4d\x76\x94\xbf\xc6\xf5\xf4\xc2\x2e\x6b\x7a\x40\xe7\x5a\xf0\xfb\xae\x0d\x7a\x82\x48\xe2\xe6\xb2\x58\xa9\x9a\x97\xe4\x29\xab\x21\x60\x21\xe4\x6f\x93\xe7\xae\x6b\x99\xcc\x1f\x54\xb6\xd4\xba\xc1\x65\x21\xd7\xfe\x2b\x00\x00\xff\xff\xd2\xfc\x9e\x0a\x5b\x06\x00\x00")

// FileVendorGitContainerumNetChUtilsHttputilSwaggerJSON is "vendor/git.containerum.net/ch/utils/httputil/swagger.json"
var FileVendorGitContainerumNetChUtilsHttputilSwaggerJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x4c\x8e\x41\x6a\x03\x31\x0c\x45\xf7\x39\x85\xf0\xba\x2d\x85\xee\x66\x9d\x4d\xd6\x6d\x0f\xa0\x8c\xff\x8c\x05\x19\xdb\x91\x64\x42\x28\xb9\x7b\xb1\x4b\x93\x2c\x8c\xe1\x3f\xe9\x7d\xfd\xec\x88\x82\x5d\x78\x5d\xa1\x61\xa2\xf0\xf1\xf6\x1e\x5e\x7a\x56\x59\x79\x83\x43\x2d\x4c\xd4\xa7\x88\xc2\x67\x3b\x9a\x8b\x37\x47\xfc\x36\xe8\x61\x7f\x47\x44\x21\xf3\x86\x6e\x68\x06\x7d\x95\x38\x2c\x03\x48\xee\xf1\xb9\x41\xaf\x8f\x50\x71\x6e\xa2\x88\x61\xa2\x85\x4f\x86\x3b\xf0\x6b\x1d\x1a\x73\x95\xbc\x3e\x16\x96\xa2\x1b\xfb\x28\x68\xcf\xf6\x08\x9b\x55\xaa\x4b\x19\x35\x5f\x09\x74\xd8\x53\x59\xc8\x13\xfe\xbf\x7e\x12\x95\x4c\x47\x24\x3e\x2d\x3d\xbd\x24\x99\xd3\x60\x1c\x37\xc9\x62\xae\xec\x45\x69\xe6\x4c\x15\xda\xcb\xfe\xe8\x3c\xc4\xa3\xec\xb6\xeb\xef\xf6\x1b\x00\x00\xff\xff\xb7\x78\x16\xe4\x32\x01\x00\x00")

func init() {
	if CTX.Err() != nil {
		panic(CTX.Err())
	}

	var err error

	err = FS.Mkdir(CTX, "vendor/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	err = FS.Mkdir(CTX, "vendor/git.containerum.net/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	err = FS.Mkdir(CTX, "vendor/git.containerum.net/ch/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	err = FS.Mkdir(CTX, "vendor/git.containerum.net/ch/api-gateway/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	err = FS.Mkdir(CTX, "vendor/git.containerum.net/ch/api-gateway/pkg/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	err = FS.Mkdir(CTX, "vendor/git.containerum.net/ch/api-gateway/pkg/utils/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	err = FS.Mkdir(CTX, "vendor/git.containerum.net/ch/api-gateway/pkg/utils/headers/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	err = FS.Mkdir(CTX, "vendor/git.containerum.net/ch/utils/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	err = FS.Mkdir(CTX, "vendor/git.containerum.net/ch/utils/httputil/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileSwaggerJSON)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "swagger.json", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	rb = bytes.NewReader(FileVendorGitContainerumNetChAPIGatewayPkgUtilsHeadersSwaggerJSON)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "vendor/git.containerum.net/ch/api-gateway/pkg/utils/headers/swagger.json", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	rb = bytes.NewReader(FileVendorGitContainerumNetChUtilsHttputilSwaggerJSON)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "vendor/git.containerum.net/ch/utils/httputil/swagger.json", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}

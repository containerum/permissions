// Code generated by fileb0x at "2018-04-24 18:37:54.231113961 +0300 MSK m=+0.004816203" from config file "b0x.yaml" DO NOT EDIT.
// modification hash(ebefba1a751bce58c67c13bed782f319.9ac17c5b338a5cd6eaafb874d7080263)

package static

import (
	"bytes"
	"compress/gzip"
	"io"
	"net/http"
	"os"
	"path"

	"context"
	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct{}

// FileSwaggerJSON is "swagger.json"
var FileSwaggerJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xec\x1b\xcb\x72\xdb\x36\xf0\xee\xaf\xc0\xb0\x3d\xc6\x66\xfa\x98\x1e\x72\xf3\x38\x9d\xd4\xd3\xa4\xf1\xd8\x71\x2e\x9d\x8c\x06\x22\x57\x34\x12\x12\x60\x00\xd0\xb2\xeb\xd1\xbf\x77\x00\xf0\x01\x50\x00\xf5\x88\x68\xcb\x89\x72\x8a\x09\xec\x03\xfb\xc4\x2e\x56\x0f\x47\x08\x45\x09\xa3\xa2\x2a\x40\x44\xaf\xd0\xbf\x47\x08\x21\x14\xe1\xb2\xcc\x49\x82\x25\x61\x34\xfe\x2c\x18\x8d\x8e\x10\xfa\xf4\x42\xed\x2d\x39\x4b\xab\x64\xbd\xbd\x62\x8e\xb3\x0c\x78\xf4\x0a\x45\xbf\x9d\xbc\x8c\xf4\x37\x42\x67\x2c\x7a\x85\x1e\x0c\x6c\x0a\x22\xe1\xa4\x54\xb0\x6a\xd7\x05\xf0\x82\x08\x41\x18\x15\x48\x00\xbf\x25\x09\x20\x21\x19\x07\x81\x2a\x01\x1c\x71\x10\xac\xe2\x09\x08\x84\x69\x8a\x70\x9e\xb3\xb9\x40\x92\xa1\x02\x53\x9c\x01\xc2\x49\x02\x42\x7f\x68\x37\x6a\xa2\x08\x45\x92\xc8\x1c\xfa\x24\x4e\x2f\xce\x15\xb3\x0b\x73\x30\x2c\x6f\x44\xc7\x59\x6c\x90\xb5\x1f\x10\x8a\x32\x90\xd6\x9f\xea\x7c\x55\x51\x60\x7e\xaf\xd0\x5e\x82\xac\x38\xad\xd9\x34\xa0\xe0\x72\x72\x52\xb3\xa2\x21\x59\x09\x5c\x4b\xec\x3c\x55\xd0\x6f\x40\x5e\x36\xfb\x4e\x6b\x60\x7b\x7b\x89\x39\x2e\x40\x02\xef\xc4\x6e\xfe\x3d\x58\xff\x47\x28\xfa\x99\xc3\x4c\xe1\xfb\x29\xee\x20\xe2\x6b\x01\xfc\xfc\xf5\x5f\x80\x53\xe0\x91\xb5\x7f\xf1\x62\x0b\x44\x97\x2c\x87\x1d\xa0\xba\xaa\xa6\x42\x12\x59\x49\x48\x0d\x7b\x0e\xb6\xf6\xff\x9f\x8e\xec\x2f\x35\x95\x28\xc6\x69\x41\x68\xdc\x48\xd9\x56\x51\x59\x85\x55\x74\x2a\x04\xc9\x68\x63\x24\x39\xdc\x42\x8e\x66\x8c\x2b\x33\xea\x59\xd7\x09\xba\x16\x90\xea\xc5\x29\xc9\x73\x42\x33\x54\x56\xbc\x64\x62\x58\x8b\x57\x07\x2d\xae\x89\x8d\xe2\x42\x3b\xe3\x94\xa5\xf7\xd1\x0b\x77\x8d\xd0\xd0\x0a\x87\xaf\x15\xe1\xa0\x64\x2d\x79\x05\xbd\x55\x91\xdc\x40\x81\x1d\xed\x2f\xf1\x9e\xc2\x8c\x50\xa2\x34\x26\x62\x9f\xb6\x2e\xe1\x6b\x05\x42\x46\x0e\x86\xc5\xe6\xa6\xa9\xce\x27\x4a\x9c\xf4\x8c\x93\x89\xb0\x75\x9e\x71\xc0\x12\x50\x0b\x89\xe6\x44\xde\xb0\x4a\x36\x16\x38\x64\x78\xa7\x8a\xa8\x41\xf0\x4f\x03\x7f\x30\xbc\x7d\x35\xbc\x56\x45\x96\xda\x36\x31\x3c\x4b\xb1\x1c\x44\xc9\xa8\x1b\x03\xf5\xc2\xaf\x2f\x7f\x59\x62\xa8\x9f\x6c\x3b\x53\x4b\x34\x0f\x69\x50\x88\x51\x0a\x33\x5c\xe5\x72\x25\x4a\xe0\x9c\x71\x7f\x28\x5f\xf8\xfd\xa5\xf3\x94\xf8\x21\xc7\x53\xc8\x17\x9e\xc4\x3b\x14\xd5\xdf\x70\x4c\xa5\xe5\x36\x65\x9b\xdf\x55\xf6\x55\x71\x7d\x45\xc8\xee\xd4\x61\xe8\x1e\xfc\x66\xff\x03\xb6\x51\xd5\x6a\xa7\x19\x38\x51\xcf\x72\x5b\x2b\x40\xda\x0a\xfb\x27\x69\xce\xef\x5d\x34\x02\x50\xf7\xc7\x15\x02\x18\x4e\x24\x0d\x6c\x94\x42\x0e\x12\x82\x16\xff\x5a\x2f\x6f\x6d\xf2\x06\xfc\x60\xf5\xcf\xc4\xea\x8d\xba\xbe\x6b\xc3\x77\x33\xc2\x2d\xcb\x55\x2d\xfa\x4d\xe9\xc0\xe0\xd8\x3c\x17\x7c\xd4\x70\x07\x97\xf8\x81\x13\x81\x31\x81\x67\x93\x05\xb6\xb2\x74\x03\x7b\x30\xf6\x43\xfc\xdf\xa3\xf8\xdf\x36\xe2\xac\xd3\x77\xed\x38\x73\xf0\xb7\x70\x0b\xb9\x9d\x0a\xe4\x7d\xa9\xd9\x13\x92\x13\x9a\xb5\x5c\x44\x40\xab\xc2\xb1\xde\x88\x32\xea\xd4\xc4\x1c\x70\xda\xff\xbb\x76\x39\xeb\xeb\x9c\x13\xf7\x03\x9b\xd3\xce\x1a\x3f\x39\x99\xcb\xb0\xf8\x7e\xfa\x19\x12\xe9\xe3\x91\x99\x95\x96\xc7\x92\x2b\xb7\x94\xa4\x57\xbd\x45\x4b\x09\x6f\xc0\x3a\x6c\xb1\x1c\x79\xb4\x1f\x91\xb4\x8f\x28\x20\x32\xbd\x36\x63\xbc\xc0\x8a\xf9\xa8\xaa\x48\xea\xc7\x68\x2c\x61\x18\xe9\x8a\xaa\x6f\xc8\xa6\x2d\xc1\xf5\x2c\xd5\x40\x29\x0f\x76\x20\x10\x11\x08\x23\x5e\xff\x61\x84\xac\x5b\x77\x5a\x9b\x84\x66\x9e\xb6\xb0\x5e\x57\x51\xb2\xd3\xc6\xa6\x5a\x52\xd0\xb5\x73\x6c\x21\x5e\x28\x30\x71\xdd\x29\xba\x3b\xce\xd8\x71\xe3\x6e\xea\x94\xca\x33\x3d\x92\x6c\x39\x73\x00\x02\xc2\x89\xdc\xdd\x25\x4e\xbe\xe0\x4c\x03\x64\x44\x9e\x24\x8c\x4a\x4c\x28\xf0\xaa\x38\xa1\x20\xe3\xe4\x26\xee\x12\x89\x88\xcb\x2f\x59\x5c\xb0\xb4\x31\xad\x46\x7b\x5d\x8b\x29\xac\xab\x2e\xaa\x98\x85\x29\x88\xae\x60\xd9\x5e\xe8\x49\x59\x85\xe4\x4d\xa8\x84\xcc\x52\x68\x4f\xe0\x84\xca\x3f\x7e\x1f\x10\xf8\xd9\xc5\xb5\xdf\xdc\x4d\x6f\x64\x22\xc9\xb6\xaa\x4e\xb1\x84\x63\x0d\x3e\x40\x5d\x13\xf9\x40\x1c\x85\x5b\x4c\x98\xc0\x34\x32\x13\xc6\x84\x56\x31\x11\x8c\x27\x53\xc6\x72\xc0\x74\x25\x81\x74\x84\x40\x15\xa6\x69\x27\xfb\x4d\xa3\x58\x18\xeb\x5b\x0d\xed\x45\x5c\xe0\xbb\x09\xdc\x49\x15\x1c\xf2\x49\xfd\x86\x25\x46\x32\xda\x77\xf8\xee\xcf\x3b\x79\xd5\x10\x09\xf2\xa3\xc8\x3c\x12\x3f\xe7\x74\x0d\x7e\x24\xc7\xb3\x19\x49\xc6\xe3\xe2\x43\x4d\xc0\xcb\x81\x4e\xe1\x13\x15\xbf\x27\x23\x19\xdd\x7b\x45\xa1\x7f\xd5\xb4\x59\xe0\xb8\x18\xe9\xf0\x97\xa7\xef\xfc\x24\x25\xe6\x64\x36\x1b\xeb\xc4\x1f\x34\xf6\xd0\x71\x95\xac\x83\x36\x87\x39\xc7\xee\x1d\x3a\x22\x12\x0a\xb1\xdc\x6c\xf6\x5f\x81\xba\x07\xdd\x70\xff\xda\xe1\xd5\x7a\x01\xf6\xb3\x5b\x77\x20\xc6\x62\xd8\xd4\x5d\x6b\x32\xfb\xb1\xe6\x65\xd5\x3d\x60\xb7\x99\xdd\xf3\x32\xb1\x46\xae\x5f\x86\x42\x35\x1f\x02\x75\xe5\x98\xbe\x7b\xe9\xac\xaa\xee\x66\xc1\xf7\xae\x67\x75\x49\x18\x3b\x9b\xec\x51\x22\x39\xe4\x10\xcd\x01\x14\x4c\xf7\x61\x46\x21\x6e\x90\x3f\x8a\xcb\x5b\xd1\x33\xec\xe1\xdd\x26\xc4\xa1\xe4\x20\x80\x4a\x81\x08\x35\x47\x52\x9f\xf1\x54\xb9\xae\x9e\xa2\x70\x5b\x51\x4d\xc5\xb5\xbd\x3b\xef\xb4\x1c\x36\xc8\x26\x7a\xf8\x63\x92\xdc\x60\x9a\x8d\x7d\xab\xb6\x58\x3a\xd3\xf4\xc2\x17\xec\xbd\x28\x35\xbe\x10\x9a\x6e\x1d\xc9\x9a\x92\xfe\x6f\x85\xc4\x1f\x29\x59\x46\xe8\xd6\xf8\xd5\x9d\xea\xad\xc6\xe0\x45\x4e\x61\x3e\xb1\x35\xbc\x23\xa3\x51\x16\x3d\x79\xe4\xfa\xa4\xf1\x9b\xb1\xe8\x36\x9a\x1a\xba\xb2\x6d\x48\x7b\x49\x53\x0e\xee\x11\x63\x98\xdb\x48\x72\x67\x6e\x36\x8d\x36\xd4\xd3\xdc\xd8\xe9\xed\xcf\xe9\x12\xfa\x27\x25\x96\xae\xa2\x4f\xc8\x8b\xb7\x7f\x17\x7c\x80\x09\xa7\x90\x2b\x90\xeb\x77\xee\x04\xc8\xf1\x1a\x77\x3b\xcd\x27\x7b\xd6\x05\xf4\x49\x79\x8c\x16\xe0\xd0\xec\xdc\x8e\x6d\xc0\x19\xa8\x7d\x4a\xad\x6f\x20\x79\x18\x55\xf6\x92\x71\x83\x24\x28\x67\xb3\xc3\x6a\xbd\xd6\x15\xad\x9e\xa5\x56\xb0\x5b\x8b\xf1\x91\xb3\x20\x29\x77\x50\x85\x87\xde\x26\x06\xeb\xee\xf3\x8b\x40\xed\xb1\xa9\xb7\x3b\x58\x7b\xce\xec\xe4\x7b\x3d\x44\x3f\x56\x55\x75\xd9\xa0\xf7\x12\x17\xe4\x3f\x18\x89\xf0\x95\x42\x1d\x0a\x9d\xe9\x48\x44\xaf\x45\xa8\xcb\xfc\xc3\xb6\x76\x3e\xf6\x2f\x12\x81\xb9\x87\x7e\xcc\xf8\x96\x88\x2b\xc9\x2d\x6c\xff\x5a\x70\x6a\xe0\xfd\x95\x12\x2e\x71\x42\xe4\x58\x05\xf8\x59\x83\xfe\xf0\x22\xf4\x84\x2f\x42\x59\x5e\x09\x09\x7c\xf2\x4d\x11\xf7\x8d\x41\x12\x0e\xbc\xdf\xcb\xbb\x53\x5b\xb8\x8c\x55\x31\xb6\x6d\xde\xd0\xd1\xf6\xe1\x5d\xe5\x49\xb3\xa8\xb9\x5c\x8d\x75\xf8\xfa\x56\x17\x3a\xfa\xe1\x7d\x67\xf8\x7d\x67\x8c\xdc\x6a\xfd\x76\xd0\x1a\x99\xab\x27\x96\x96\xa7\xce\xd6\x98\x5b\x0a\x28\xa4\x9f\xac\x15\x42\x74\xfe\x5a\x57\xc6\x15\x45\x2a\xd5\x32\x6a\x5e\x56\xf4\x0f\x90\x3a\xc0\x46\x28\x4a\x45\xc7\x36\x46\x33\xbb\xf5\xb5\x82\xa6\xd3\xdc\xdc\x14\x9c\x09\x3e\x8b\xe5\x46\x3b\xb7\x40\x53\xc6\xe3\x80\xb8\x70\x49\x8e\x33\x2c\x61\x8e\xef\xb5\xb8\x2a\x49\x72\x11\xdf\x68\x6c\x22\xae\x7f\x10\x7a\xf2\x59\x30\xba\x62\x6c\xd0\x66\xc7\x9a\x03\x7c\x4c\x86\xfa\xe3\x87\x5a\xdf\x47\x8b\xff\x03\x00\x00\xff\xff\x44\x9d\x3c\x3b\x33\x3b\x00\x00")

// FileVendorGitContainerumNetChAPIGatewayPkgUtilsHeadersSwaggerJSON is "vendor/git.containerum.net/ch/api-gateway/pkg/utils/headers/swagger.json"
var FileVendorGitContainerumNetChAPIGatewayPkgUtilsHeadersSwaggerJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xbc\x93\xcf\x4a\xc3\x40\x10\x87\xef\x7d\x8a\x61\xce\x46\x04\x6f\xb9\x89\x3d\x34\x17\x29\x45\x45\x10\x0f\xa3\x99\xc6\xc5\xec\x26\xdd\x3f\x88\x48\xdf\x5d\x66\x37\xb4\x8a\x90\x8d\x85\x78\xc8\x61\x7f\xf3\x25\xf9\x32\x33\xf9\x5c\x00\xa0\x7b\xa7\xa6\x61\x8b\x25\xe0\xe5\xf9\x05\x9e\x49\xd6\x93\x25\xcd\x9e\xad\xc3\x12\x84\x02\xc0\x0d\xef\x02\x3b\x5f\x2d\x57\x4c\x75\xe4\x53\x01\x00\x0d\x69\x96\xfb\x1f\x8a\x01\x2a\xaa\x65\x7c\x50\xac\xfa\x8f\x3e\x56\x9d\xb7\xca\x34\xc7\x7c\xdb\x59\x4d\x5e\x2a\x21\xa8\xfa\x98\x2b\x23\xd9\x6b\x7a\xcb\x21\xb5\xbc\x0b\xca\x72\x8d\x25\x78\x1b\x38\xc6\xfb\x54\xc5\x3b\xc7\x76\xdc\x4b\x88\x7f\x96\x1a\x5a\x71\x43\x9a\xa7\x74\x4c\xb8\xbc\xde\x69\xbd\xb9\x6e\x15\x1b\x9f\xed\x4f\xc2\xe6\x92\xb8\x6a\xa6\x38\x44\x6a\x0e\x85\xf4\x71\xd5\x7a\xcc\x20\x31\x45\xb5\x3e\x55\xe0\xb8\x3d\xaa\x9f\xa6\x75\xdb\xbd\xb1\x19\xdf\xdd\x88\x4c\x5a\xde\x9c\xd4\xcf\x95\xce\x0d\x6c\xd3\xb5\x9c\x9d\x97\x40\x79\x31\x36\x41\x63\x09\x8f\xc3\x19\x00\x83\xfb\xa6\x08\x80\x54\x6b\x65\x70\x38\x3f\x4d\x76\x94\xbf\xc6\xf5\xf4\xc2\x2e\x6b\x7a\x40\xe7\x5a\xf0\xfb\xae\x0d\x7a\x82\x48\xe2\xe6\xb2\x58\xa9\x9a\x97\xe4\x29\xab\x21\x60\x21\xe4\x6f\x93\xe7\xae\x6b\x99\xcc\x1f\x54\xb6\xd4\xba\xc1\x65\x21\xd7\xfe\x2b\x00\x00\xff\xff\xd2\xfc\x9e\x0a\x5b\x06\x00\x00")

func init() {
	if CTX.Err() != nil {
		panic(CTX.Err())
	}

	var err error

	err = FS.Mkdir(CTX, "vendor/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	err = FS.Mkdir(CTX, "vendor/git.containerum.net/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	err = FS.Mkdir(CTX, "vendor/git.containerum.net/ch/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	err = FS.Mkdir(CTX, "vendor/git.containerum.net/ch/api-gateway/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	err = FS.Mkdir(CTX, "vendor/git.containerum.net/ch/api-gateway/pkg/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	err = FS.Mkdir(CTX, "vendor/git.containerum.net/ch/api-gateway/pkg/utils/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	err = FS.Mkdir(CTX, "vendor/git.containerum.net/ch/api-gateway/pkg/utils/headers/", 0777)
	if err != nil && err != os.ErrExist {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileSwaggerJSON)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "swagger.json", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	rb = bytes.NewReader(FileVendorGitContainerumNetChAPIGatewayPkgUtilsHeadersSwaggerJSON)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "vendor/git.containerum.net/ch/api-gateway/pkg/utils/headers/swagger.json", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}

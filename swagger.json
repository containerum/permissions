{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Permissions service stores user resources and allows to manage access to resources",
    "title": "Permissions API"
  },
  "paths": {
    "/accesses": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Returns user accesses to resources.",
        "operationId": "GetResourcesAccesses",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "user accesses to resources",
            "schema": {
              "$ref": "#/definitions/ResourcesAccesses"
            }
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      }
    },
    "/admin/accesses": {
      "put": {
        "tags": [
          "Permissions"
        ],
        "summary": "Assign access level for all user resources. Used for billing purposes.",
        "operationId": "SetResourcesAccesses",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetResourcesAccessesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "access set"
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      }
    },
    "/admin/namespaces": {
      "get": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Get all namespaces (admin only).",
        "operationId": "GetAllNamespaces",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A set of filters separated with comma. See \"dao\" package for more information.",
            "name": "filter",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "name": "page",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "namespaces response",
            "schema": {
              "$ref": "#/definitions/getAllNamespacesOKBody"
            }
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Create namespace without billing (admin only).",
        "operationId": "AdminCreateNamespace",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NamespaceAdminCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "namespace created"
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      }
    },
    "/admin/namespaces/{id}": {
      "put": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Resize namespace without billing (admin only).",
        "operationId": "AdminResizeNamespace",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NamespaceAdminResizeRequest"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Resource ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "namespace resized"
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      }
    },
    "/namespaces": {
      "get": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Get user namespaces.",
        "operationId": "GetUserNamespaces",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A set of filters separated with comma. See \"dao\" package for more information.",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "namespaces response",
            "schema": {
              "$ref": "#/definitions/getUserNamespacesOKBody"
            }
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Create namespace using billing.",
        "operationId": "CreateNamespace",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NamespaceCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "namespace created"
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Delete all user namespaces.",
        "operationId": "DeleteAllUserNamespaces",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "namespaces deleted"
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      }
    },
    "/namespaces/{id}": {
      "get": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Get namespace.",
        "operationId": "GetNamespace",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Resource ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "namespace response",
            "schema": {
              "$ref": "#/definitions/Namespace"
            }
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Resize namespace.",
        "operationId": "ResizeNamespace",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NamespaceResizeRequest"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Resource ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "namespace resized"
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Delete namespace.",
        "operationId": "DeleteNamespace",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Resource ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "namespace deleted"
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      }
    },
    "/namespaces/{id}/accesses": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Get namespace with user permissions.",
        "operationId": "GetNamespaceWithPermissions",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Resource ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "namespace response",
            "schema": {
              "$ref": "#/definitions/Namespace"
            }
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Permissions"
        ],
        "summary": "Grant namespace permission to user.",
        "operationId": "SetNamespaceAccess",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetResourceAccessRequest"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Resource ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "access set"
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Permissions"
        ],
        "summary": "Delete namespace permission to user.",
        "operationId": "DeleteNamespaceAccess",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteResourceAccessRequest"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Resource ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "access deleted"
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      }
    },
    "/namespaces/{id}/rename": {
      "put": {
        "tags": [
          "Namespaces"
        ],
        "summary": "Rename namespace.",
        "operationId": "RenameNamespace",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NamespaceRenameRequest"
            }
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Resource ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "namespace renamed"
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      }
    },
    "/projects": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create project.",
        "operationId": "CreateProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "project created"
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      }
    },
    "/projects/{project}/groups": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get project groups.",
        "operationId": "GetProjectGroups",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Project ID",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "project groups",
            "schema": {
              "$ref": "#/definitions/getProjectGroupsOKBody"
            }
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Add group to project (admin only).",
        "operationId": "AddGroupToProject",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Project ID",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectAddGroupRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "group added to project"
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      }
    },
    "/projects/{project}/groups/{group}": {
      "put": {
        "description": "Change access of group member to namespace",
        "tags": [
          "Projects"
        ],
        "operationId": "SetGroupMemberAccess",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-User-ID",
            "in": "header",
            "required": true
          },
          {
            "enum": [
              "user",
              "admin"
            ],
            "type": "string",
            "name": "X-User-Role",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the of the user on behalf of which the administrator can perform the action",
            "name": "user-id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Project ID",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Group ID",
            "name": "group",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetGroupMemberAccessRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "access set"
          },
          "default": {
            "description": "cherry error",
            "schema": {
              "$ref": "#/definitions/errOAIGen"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccessLevel": {
      "type": "string",
      "enum": [
        "none",
        "read",
        "readdelete",
        "write",
        "owner"
      ]
    },
    "AccessObject": {
      "description": "AccessObject represents user access to resource",
      "type": "object",
      "properties": {
        "access": {
          "type": "string",
          "x-go-name": "Access"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/auth/proto"
    },
    "AccessTokenByIDResponse": {
      "type": "object",
      "title": "AccessTokenByIDResponse contains access token get by ID.",
      "properties": {
        "access_token": {
          "type": "string",
          "x-go-name": "AccessToken"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/auth/proto"
    },
    "Accounts": {
      "description": "Accounts -- list of bound accounts",
      "type": "object",
      "properties": {
        "accounts": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Accounts"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "AdminVolumeResizeRequest": {
      "description": "AdminVolumeResizeRequest contains parameters for changing volume size as admin",
      "type": "object",
      "properties": {
        "capacity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Capacity"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/volume-manager/pkg/models"
    },
    "AuthClient": {
      "type": "object",
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/auth/proto"
    },
    "AuthServer": {
      "type": "object",
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/auth/proto"
    },
    "AvailableSolution": {
      "description": "AvailableSolution -- solution which user can run",
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-go-name": "Active"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Images"
        },
        "limits": {
          "$ref": "#/definitions/SolutionLimits"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "AvailableSolutionsList": {
      "description": "AvailableSolutionsList -- list of available solutions",
      "type": "object",
      "properties": {
        "solutions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AvailableSolution"
          },
          "x-go-name": "Solutions"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "BoundAccountDeleteRequest": {
      "description": "BoundAccountDeleteRequest -- request to remove bound account",
      "type": "object",
      "required": [
        "resource"
      ],
      "properties": {
        "resource": {
          "type": "string",
          "x-go-name": "Resource"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "BoundAccounts": {
      "description": "BoundAccounts -- bound accounts list for user",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "ChangeTariffRequest": {
      "description": "ChangeTariffRequest contains parameters needed for tariff changing",
      "type": "object",
      "properties": {
        "tariff_id": {
          "type": "string",
          "x-go-name": "TariffID"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/bill-external/models"
    },
    "ConfigFile": {
      "type": "object",
      "properties": {
        "config_file": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "ConfigMap": {
      "description": "ConfigMap -- model for config map",
      "type": "object",
      "required": [
        "name",
        "data"
      ],
      "properties": {
        "created_at": {
          "description": "creation date in RFC3339 format",
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "data": {
          "$ref": "#/definitions/ConfigMapData"
        },
        "deleted_at": {
          "description": "delete date in RFC3339 format",
          "type": "string",
          "x-go-name": "DeletedAt"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "ConfigMapData": {
      "description": "ConfigMapData -- model for config map data",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "ConfigMapsList": {
      "description": "ConfigMapsList -- model for config maps list",
      "type": "object",
      "properties": {
        "configmaps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigMap"
          },
          "x-go-name": "ConfigMaps"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "Container": {
      "description": "Container -- model for container in deployment",
      "type": "object",
      "required": [
        "image",
        "name",
        "limits"
      ],
      "properties": {
        "commands": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Commands"
        },
        "config_maps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerVolume"
          },
          "x-go-name": "ConfigMaps"
        },
        "env": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Env"
          },
          "x-go-name": "Env"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "limits": {
          "$ref": "#/definitions/Resource"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerPort"
          },
          "x-go-name": "Ports"
        },
        "volume_mounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContainerVolume"
          },
          "x-go-name": "VolumeMounts"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "ContainerPort": {
      "description": "ContainerPort -- model for port in container",
      "type": "object",
      "required": [
        "name",
        "port",
        "protocol"
      ],
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Port"
        },
        "protocol": {
          "$ref": "#/definitions/Protocol"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "ContainerVolume": {
      "description": "ContainerVolume -- volume (or config map) mounted in container",
      "type": "object",
      "required": [
        "mount_path"
      ],
      "properties": {
        "mode": {
          "type": "string",
          "x-go-name": "Mode"
        },
        "mount_path": {
          "type": "string",
          "x-go-name": "MountPath"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "sub_path": {
          "type": "string",
          "x-go-name": "SubPath"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "CreateTokenResponse": {
      "type": "object",
      "title": "CreateTokenResponse contains access and refresh token.",
      "properties": {
        "access_token": {
          "type": "string",
          "x-go-name": "AccessToken"
        },
        "refresh_token": {
          "type": "string",
          "x-go-name": "RefreshToken"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/auth/proto"
    },
    "CreateVolume": {
      "description": "CreateVolume --",
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "tariff_id": {
          "type": "string",
          "x-go-name": "TariffID"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "DeleteResourceAccessRequest": {
      "description": "DeleteUserAccessRequest is a request object for deleting access to resource for user",
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "format": "email",
          "x-go-name": "UserName"
        }
      },
      "x-go-name": "DeleteUserAccessRequest",
      "x-go-package": "git.containerum.net/ch/permissions/pkg/model"
    },
    "Deployment": {
      "description": "Deployment -- model for deployments",
      "type": "object",
      "required": [
        "containers",
        "name",
        "replicas"
      ],
      "properties": {
        "active": {
          "type": "boolean",
          "x-go-name": "Active"
        },
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Container"
          },
          "x-go-name": "Containers"
        },
        "created_at": {
          "description": "creation date in RFC3339 format",
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "deleted_at": {
          "description": "delete date in RFC3339 format",
          "type": "string",
          "x-go-name": "DeletedAt"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "replicas": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Replicas"
        },
        "solution_id": {
          "description": "Solution ID (only if deployment is part of solution)",
          "type": "string",
          "x-go-name": "SolutionID"
        },
        "status": {
          "$ref": "#/definitions/DeploymentStatus"
        },
        "total_cpu": {
          "description": "total CPU usage by all containers in this deployment",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TotalCPU"
        },
        "total_memory": {
          "description": "total RAM usage by all containers in this deployment",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TotalMemory"
        },
        "version": {
          "$ref": "#/definitions/Version"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "DeploymentStatus": {
      "description": "DeploymentStatus -- kubernetes status of deployment",
      "type": "object",
      "properties": {
        "available_replicas": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AvailableReplicas"
        },
        "ready_replicas": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ReadyReplicas"
        },
        "replicas": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Replicas"
        },
        "unavailable_replicas": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UnavailableReplicas"
        },
        "updated_replicas": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpdatedReplicas"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "DeploymentVersion": {
      "description": "DeploymentVersion -- model for deployment version update",
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "DeploymentsList": {
      "description": "DeploymentsList -- model for deployments list",
      "type": "object",
      "properties": {
        "deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Deployment"
          },
          "x-go-name": "Deployments"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "DirectVolumeCreateRequest": {
      "description": "DirectVolumeCreateRequest is a request object for creating volume as admin (without billing)",
      "type": "object",
      "properties": {
        "capacity": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Capacity"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/volume-manager/pkg/models"
    },
    "Domain": {
      "description": "DomainListResponse -- domains list",
      "type": "object",
      "required": [
        "domain"
      ],
      "properties": {
        "added_by": {
          "type": "string",
          "x-go-name": "AddedBy"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "domain": {
          "type": "string",
          "x-go-name": "Domain"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "DomainListResponse": {
      "description": "DomainListResponse -- domains list",
      "type": "object",
      "properties": {
        "domain_list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          },
          "x-go-name": "DomainList"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "Duration": {
      "description": "# Examples\n\nExample 1: Compute Duration from two Timestamps in pseudo code.\n\nTimestamp start = ...;\nTimestamp end = ...;\nDuration duration = ...;\n\nduration.seconds = end.seconds - start.seconds;\nduration.nanos = end.nanos - start.nanos;\n\nif (duration.seconds \u003c 0 \u0026\u0026 duration.nanos \u003e 0) {\nduration.seconds += 1;\nduration.nanos -= 1000000000;\n} else if (durations.seconds \u003e 0 \u0026\u0026 duration.nanos \u003c 0) {\nduration.seconds -= 1;\nduration.nanos += 1000000000;\n}\n\nExample 2: Compute Timestamp from Timestamp + Duration in pseudo code.\n\nTimestamp start = ...;\nDuration duration = ...;\nTimestamp end = ...;\n\nend.seconds = start.seconds + duration.seconds;\nend.nanos = start.nanos + duration.nanos;\n\nif (end.nanos \u003c 0) {\nend.seconds -= 1;\nend.nanos += 1000000000;\n} else if (end.nanos \u003e= 1000000000) {\nend.seconds += 1;\nend.nanos -= 1000000000;\n}\n\nExample 3: Compute Duration from datetime.timedelta in Python.\n\ntd = datetime.timedelta(days=3, minutes=10)\nduration = Duration()\nduration.FromTimedelta(td)\n\n# JSON Mapping\n\nIn JSON format, the Duration type is encoded as a string rather than an\nobject, where the string ends in the suffix \"s\" (indicating seconds) and\nis preceded by the number of seconds, with nanoseconds expressed as\nfractional seconds. For example, 3 seconds with 0 nanoseconds should be\nencoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should\nbe expressed in JSON format as \"3.000000001s\", and 3 seconds and 1\nmicrosecond should be expressed in JSON format as \"3.000001s\".",
      "type": "object",
      "title": "A Duration represents a signed, fixed-length span of time represented\nas a count of seconds and fractions of seconds at nanosecond\nresolution. It is independent of any calendar and concepts like \"day\"\nor \"month\". It is related to Timestamp in that the difference between\ntwo Timestamp values is a Duration and it can be added or subtracted\nfrom a Timestamp. Range is approximately +-10,000 years.",
      "properties": {
        "nanos": {
          "description": "Signed fractions of a second at nanosecond resolution of the span\nof time. Durations less than one second are represented with a 0\n`seconds` field and a positive or negative `nanos` field. For durations\nof one second or more, a non-zero value for the `nanos` field must be\nof the same sign as the `seconds` field. Must be from -999,999,999\nto +999,999,999 inclusive.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Nanos"
        },
        "seconds": {
          "description": "Signed seconds of the span of time. Must be from -315,576,000,000\nto +315,576,000,000 inclusive. Note: these bounds are computed from:\n60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Seconds"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/golang/protobuf/ptypes/duration"
    },
    "Env": {
      "description": "Env -- key-value pair of environment variables",
      "type": "object",
      "required": [
        "value",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "Err": {
      "description": "Err -- standard serializable API error\nMessage -- constant error message:\n+ \"invalid username\"\n+ \"quota exceeded\"\n+ \"validation error\"\n...etc...\nID -- unique error identification code\nDetails -- optional context error messages kinda\n+ \"field 'Replicas' must be non-zero value\"\n+ \"not enough tights to feed gopher\"\n+ \"resource 'God' does't exist\"\nFields -- optional set of key-value pairs",
      "type": "object",
      "properties": {
        "details": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Details"
        },
        "fields": {
          "$ref": "#/definitions/Fields"
        },
        "id": {
          "$ref": "#/definitions/ErrID"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "status_http": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StatusHTTP"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/cherry"
    },
    "ErrID": {
      "description": "ErrID -- represents unique error ID",
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/ErrKind"
        },
        "sid": {
          "$ref": "#/definitions/ErrSID"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/cherry"
    },
    "ErrKind": {
      "description": "ErrKind -- represents kind of error",
      "type": "integer",
      "format": "uint64",
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/cherry"
    },
    "ErrSID": {
      "description": "ErrSID -- represents service ID of error",
      "type": "string",
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/cherry"
    },
    "ExtendTokenResponse": {
      "description": "ExtendTokenResponse contains new access and refresh tokens",
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "x-go-name": "AccessToken"
        },
        "refresh_token": {
          "type": "string",
          "x-go-name": "RefreshToken"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/auth/proto"
    },
    "Fields": {
      "description": "Fields -- represents additional key-value fields of error",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/cherry"
    },
    "GetUserTokensResponse": {
      "description": "GetUserTokensResponse contains user tokens",
      "type": "object",
      "properties": {
        "tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StoredTokenForUser"
          },
          "x-go-name": "Tokens"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/auth/proto"
    },
    "IDList": {
      "description": "IDList -- ids list",
      "type": "array",
      "items": {
        "type": "string"
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "Image": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Tag": {
          "type": "string"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "Ingress": {
      "description": "Ingress -- model for ingress",
      "type": "object",
      "required": [
        "name",
        "rules"
      ],
      "properties": {
        "created_at": {
          "description": "creation date in RFC3339 format",
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "deleted_at": {
          "description": "delete date in RFC3339 format",
          "type": "string",
          "x-go-name": "DeletedAt"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Rule"
          },
          "x-go-name": "Rules"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "IngressesList": {
      "description": "IngressesList -- model for ingresses list",
      "type": "object",
      "properties": {
        "ingresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ingress"
          },
          "x-go-name": "Ingress"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "Link": {
      "description": "Link -- link (for registration/activation/etc)",
      "type": "object",
      "required": [
        "link"
      ],
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "expired_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ExpiredAt"
        },
        "is_active": {
          "type": "boolean",
          "x-go-name": "IsActive"
        },
        "link": {
          "type": "string",
          "x-go-name": "Link"
        },
        "sent_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "SentAt"
        },
        "type": {
          "$ref": "#/definitions/LinkType"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "LinkType": {
      "description": "LinkType -- link type",
      "type": "string",
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "Links": {
      "description": "Links -- links list",
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "x-go-name": "Links"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "LoginID": {
      "description": "LoginID -- logins and user ID",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "LoginRequest": {
      "description": "LoginRequest -- login request (for basic login)",
      "type": "object",
      "required": [
        "login",
        "password"
      ],
      "properties": {
        "login": {
          "type": "string",
          "x-go-name": "Login"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "MassiveUnsubscribeTariffRequest": {
      "description": "MassiveUnsubscribeTariffRequest contains parameters needed for all tariffs unsubscribing",
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Resources"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/bill-external/models"
    },
    "Namespace": {
      "$ref": "#/definitions/namespaceOAIGen"
    },
    "NamespaceAdminCreateRequest": {
      "description": "NamespaceAdminCreateRequest contains parameters for creating namespace without billing",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CPU"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "max_ext_services": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxExtServices"
        },
        "max_int_services": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxIntServices"
        },
        "max_traffic": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxTraffic"
        },
        "memory": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Memory"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/pkg/model"
    },
    "NamespaceAdminResizeRequest": {
      "description": "NamespaceAdminResizeRequest contains parameter for resizing namespace without billing",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CPU"
        },
        "max_ext_services": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxExtServices"
        },
        "max_int_services": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxIntServices"
        },
        "max_traffic": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxTraffic"
        },
        "memory": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Memory"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/pkg/model"
    },
    "NamespaceCreateRequest": {
      "description": "NamespaceCreateRequest contains parameters for creating namespace",
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "tariff_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TariffID"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/pkg/model"
    },
    "NamespaceRenameRequest": {
      "description": "NamespaceRenameRequest contains parameters for renaming namespace",
      "$ref": "#/definitions/ResourceUpdateName"
    },
    "NamespaceResizeRequest": {
      "description": "NamespaceResizeRequest contains parameters for changing namespace quota",
      "type": "object",
      "properties": {
        "tariff_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TariffID"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/pkg/model"
    },
    "NamespaceTariff": {
      "description": "NamespaceTariff represents billing tariff for namespace\nIf VolumeSize provided non-persistent volume will be created.",
      "type": "object",
      "properties": {
        "cpu_limit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CPULimit"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "external_services": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExternalServices"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "internal_services": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "InternalServices"
        },
        "is_active": {
          "type": "boolean",
          "x-go-name": "Active"
        },
        "is_public": {
          "type": "boolean",
          "x-go-name": "Public"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "memory_limit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MemoryLimit"
        },
        "price": {
          "type": "number",
          "format": "double",
          "x-go-name": "Price"
        },
        "traffic": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Traffic"
        },
        "traffic_price": {
          "type": "number",
          "format": "double",
          "x-go-name": "TrafficPrice"
        },
        "volume_size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "VolumeSize"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/bill-external/models"
    },
    "NamespaceWithPermissions": {
      "description": "NamespaceWithPermissions is a response object for get requests",
      "type": "object",
      "properties": {
        "Permission": {
          "$ref": "#/definitions/Permission"
        },
        "cpu": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CPU"
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreateTime"
        },
        "delete_time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeleteTime"
        },
        "deleted": {
          "type": "boolean",
          "x-go-name": "Deleted"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "max_external_services": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxExtServices"
        },
        "max_internal_services": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxIntServices"
        },
        "max_traffic": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxTraffic"
        },
        "owner_user_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "OwnerUserID"
        },
        "owner_user_login": {
          "type": "string",
          "format": "email",
          "x-go-name": "OwnerUserLogin"
        },
        "project_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ProjectID"
        },
        "ram": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RAM"
        },
        "tariff_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TariffID"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Permission"
          },
          "x-go-name": "Permissions"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/pkg/model"
    },
    "NamespacesList": {
      "description": "NamespacesList -- model for namespaces list",
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Namespace"
          },
          "x-go-name": "Namespaces"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "OAuthLoginRequest": {
      "description": "LoginRequest -- login request (for oauth login)",
      "type": "object",
      "required": [
        "resource",
        "access_token"
      ],
      "properties": {
        "access_token": {
          "type": "string",
          "x-go-name": "AccessToken"
        },
        "resource": {
          "$ref": "#/definitions/OAuthResource"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "OAuthResource": {
      "type": "string",
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "OneTimeTokenLoginRequest": {
      "description": "LoginRequest -- login request (for token login)",
      "type": "object",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "PRVersion": {
      "description": "PRVersion represents a PreRelease Version",
      "type": "object",
      "properties": {
        "IsNum": {
          "type": "boolean"
        },
        "VersionNum": {
          "type": "integer",
          "format": "uint64"
        },
        "VersionStr": {
          "type": "string"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/blang/semver"
    },
    "PasswordChangeRequest": {
      "description": "PasswordChangeRequest -- password change request",
      "type": "object",
      "required": [
        "current_password",
        "new_password"
      ],
      "properties": {
        "current_password": {
          "type": "string",
          "x-go-name": "CurrentPassword"
        },
        "new_password": {
          "type": "string",
          "x-go-name": "NewPassword"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "PasswordRestoreRequest": {
      "description": "PasswordRestoreRequest -- password restore request",
      "type": "object",
      "required": [
        "link",
        "new_password"
      ],
      "properties": {
        "link": {
          "type": "string",
          "x-go-name": "Link"
        },
        "new_password": {
          "type": "string",
          "x-go-name": "NewPassword"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "Path": {
      "description": "Path -- ingress path",
      "type": "object",
      "required": [
        "path",
        "service_name",
        "service_port"
      ],
      "properties": {
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "service_name": {
          "type": "string",
          "x-go-name": "ServiceName"
        },
        "service_port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ServicePort"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "Permission": {
      "description": "Permission represents information about user permission to resource",
      "type": "object",
      "properties": {
        "access": {
          "$ref": "#/definitions/AccessLevel"
        },
        "access_level_change_time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "AccessLevelChangeTime"
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreateTime"
        },
        "group_id": {
          "type": "string",
          "x-go-name": "GroupID"
        },
        "kind": {
          "$ref": "#/definitions/ResourceType"
        },
        "new_access_level": {
          "$ref": "#/definitions/AccessLevel"
        },
        "perm_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID"
        },
        "resource_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ResourceID"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UserID"
        },
        "user_login": {
          "type": "string",
          "format": "email",
          "x-go-name": "UserLogin"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/pkg/model"
    },
    "PersistentVolumeAccessMode": {
      "type": "string",
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "Pod": {
      "description": "Pod -- model for pod",
      "type": "object",
      "properties": {
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Container"
          },
          "x-go-name": "Containers"
        },
        "created_at": {
          "description": "creation date in RFC3339 format",
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "deploy": {
          "type": "string",
          "x-go-name": "Deploy"
        },
        "image_pull_secret": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "ImagePullSecret"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "status": {
          "$ref": "#/definitions/PodStatus"
        },
        "total_cpu": {
          "description": "total CPU usage by all containers in this pod",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TotalCPU"
        },
        "total_memory": {
          "description": "total RAM usage by all containers in this pod",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "TotalMemory"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "PodStatus": {
      "description": "PodStatus -- kubernetes status of pod",
      "type": "object",
      "properties": {
        "phase": {
          "type": "string",
          "x-go-name": "Phase"
        },
        "restart_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RestartCount"
        },
        "start_at": {
          "description": "pod start date in RFC3339 format",
          "type": "string",
          "x-go-name": "StartAt"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "PodsList": {
      "description": "PodsList -- model for pods list",
      "type": "object",
      "properties": {
        "pods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pod"
          },
          "x-go-name": "Pods"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "Profile": {
      "description": "Profile -- additional user information",
      "type": "object",
      "properties": {
        "access": {
          "type": "string",
          "x-go-name": "Access"
        },
        "blacklisted_at": {
          "type": "string",
          "x-go-name": "BlacklistedAt"
        },
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "data": {
          "$ref": "#/definitions/UserData"
        },
        "deleted_at": {
          "type": "string",
          "x-go-name": "DeletedAt"
        },
        "referral": {
          "type": "string",
          "x-go-name": "Referral"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "Project": {
      "type": "object",
      "properties": {
        "create_time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreateTime"
        },
        "delete_time": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeleteTime"
        },
        "deleted": {
          "type": "boolean",
          "x-go-name": "Deleted"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "ID"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Namespace"
          },
          "x-go-name": "Namespaces"
        },
        "owner_user_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "OwnerUserID"
        },
        "owner_user_login": {
          "type": "string",
          "format": "email",
          "x-go-name": "OwnerUserLogin"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/pkg/model"
    },
    "ProjectAddGroupRequest": {
      "description": "ProjectAddGroupRequest contains parameters for adding permissions for group",
      "type": "object",
      "properties": {
        "group": {
          "type": "string",
          "x-go-name": "GroupID"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/pkg/model"
    },
    "ProjectCreateRequest": {
      "description": "ProjectCreateRequest contains parameters for creating project",
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "x-go-name": "Label"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/pkg/model"
    },
    "Protocol": {
      "description": "represents port protocol type (TCP or UDP)",
      "type": "string",
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "RegisterRequest": {
      "description": "RegisterRequest -- request to create new user",
      "type": "object",
      "required": [
        "login",
        "password",
        "recaptcha"
      ],
      "properties": {
        "login": {
          "type": "string",
          "x-go-name": "Login"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "recaptcha": {
          "type": "string",
          "x-go-name": "ReCaptcha"
        },
        "referral": {
          "type": "string",
          "x-go-name": "Referral"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "RenameRequest": {
      "description": "RenameRequest contains parameters needed for resource renaming",
      "type": "object",
      "properties": {
        "resource_label": {
          "type": "string",
          "x-go-name": "ResourceLabel"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/bill-external/models"
    },
    "Resource": {
      "description": "Resource -- represents namespace CPU and RAM",
      "type": "object",
      "required": [
        "cpu",
        "memory"
      ],
      "properties": {
        "cpu": {
          "description": "CPU in m",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CPU"
        },
        "memory": {
          "description": "RAM in Mi",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Memory"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "ResourceType": {
      "type": "string",
      "x-go-package": "git.containerum.net/ch/permissions/pkg/model"
    },
    "ResourceUpdateName": {
      "$ref": "#/definitions/resourceUpdateNameOAIGen"
    },
    "ResourceUpdateUserAccess": {
      "$ref": "#/definitions/resourceUpdateUserAccessOAIGen"
    },
    "Resources": {
      "type": "object",
      "title": "Resources -- represents namespace limits and user resources.",
      "required": [
        "hard"
      ],
      "properties": {
        "hard": {
          "$ref": "#/definitions/Resource"
        },
        "used": {
          "$ref": "#/definitions/Resource"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "ResourcesAccess": {
      "description": "ResourceAccesses contains user accesses to resources",
      "type": "object",
      "properties": {
        "namespace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccessObject"
          },
          "x-go-name": "Namespace"
        },
        "volume": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccessObject"
          },
          "x-go-name": "Volume"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/auth/proto"
    },
    "ResourcesAccesses": {
      "$ref": "#/definitions/resourcesAccessOAIGen"
    },
    "Rule": {
      "description": "Rule -- ingress rule",
      "type": "object",
      "required": [
        "host",
        "path"
      ],
      "properties": {
        "host": {
          "type": "string",
          "x-go-name": "Host"
        },
        "path": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Path"
          },
          "x-go-name": "Path"
        },
        "tls_secret": {
          "type": "string",
          "x-go-name": "TLSSecret"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "RunSolutionResponse": {
      "description": "RunSolutionResponse -- response to run solution request",
      "type": "object",
      "properties": {
        "created": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Created"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Errors"
        },
        "not_created": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NotCreated"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "Secret": {
      "description": "model for secret",
      "type": "object",
      "required": [
        "name",
        "data"
      ],
      "properties": {
        "created_at": {
          "description": "creation date in RFC3339 format",
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Data"
        },
        "deleted_at": {
          "description": "delete date in RFC3339 format",
          "type": "string",
          "x-go-name": "DeletedAt"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "SecretsList": {
      "description": "SecretsList -- model for secrets list",
      "type": "object",
      "properties": {
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Secret"
          },
          "x-go-name": "Secrets"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "SelectedConfigMapsList": {
      "description": "SelectedConfigMapsList -- model for config maps list from all namespaces",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ConfigMapsList"
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "SelectedIngressesList": {
      "description": "SelectedIngressesList -- model for ingresses list from all namespaces",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/IngressesList"
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "Service": {
      "description": "represents service",
      "type": "object",
      "required": [
        "name",
        "ports"
      ],
      "properties": {
        "created_at": {
          "description": "creation date in RFC3339 format",
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "deleted_at": {
          "description": "delete date in RFC3339 format",
          "type": "string",
          "x-go-name": "DeletedAt"
        },
        "deploy": {
          "type": "string",
          "x-go-name": "Deploy"
        },
        "domain": {
          "type": "string",
          "x-go-name": "Domain"
        },
        "ips": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "IPs"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServicePort"
          },
          "x-go-name": "Ports"
        },
        "solution_id": {
          "description": "Solution ID (only if service is part of solution)",
          "type": "string",
          "x-go-name": "SolutionID"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "ServicePort": {
      "description": "represent service port",
      "type": "object",
      "required": [
        "name",
        "target_port",
        "protocol"
      ],
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Port"
        },
        "protocol": {
          "$ref": "#/definitions/Protocol"
        },
        "target_port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TargetPort"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "ServiceType": {
      "description": "represents service type",
      "type": "string",
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "ServicesList": {
      "description": "ServicesList -- model for services list",
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Service"
          },
          "x-go-name": "Services"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "SetGroupMemberAccessRequest": {
      "description": "SetGroupMemberAccessRequest contains parameters for setting access to member of group",
      "type": "object",
      "properties": {
        "access": {
          "$ref": "#/definitions/UserGroupAccess"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/pkg/model"
    },
    "SetResourceAccessRequest": {
      "description": "SetUserAccessRequest is a request object for setting access to resource for user",
      "$ref": "#/definitions/ResourceUpdateUserAccess"
    },
    "SetResourcesAccessesRequest": {
      "description": "SetUserAccessRequest is a request object for setting user accesses",
      "type": "object",
      "properties": {
        "access": {
          "$ref": "#/definitions/AccessLevel"
        }
      },
      "x-go-name": "SetUserAccessesRequest",
      "x-go-package": "git.containerum.net/ch/permissions/pkg/model"
    },
    "SolutionEnv": {
      "description": "SolutionEnv -- solution environment variables",
      "type": "object",
      "properties": {
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Env"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "SolutionLimits": {
      "description": "SolutionLimits -- solution resources limits",
      "type": "object",
      "properties": {
        "cpu": {
          "type": "string",
          "x-go-name": "CPU"
        },
        "ram": {
          "type": "string",
          "x-go-name": "RAM"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "SolutionResources": {
      "description": "SolutionResources -- list of solution resources",
      "type": "object",
      "properties": {
        "resources": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "x-go-name": "Resources"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "Storage": {
      "description": "Storage describes volumes storage",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Size"
        },
        "used": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Used"
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Volume"
          },
          "x-go-name": "Volumes"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/volume-manager/pkg/models"
    },
    "StoredToken": {
      "description": "StoredToken is a representaion of token database record",
      "type": "object",
      "properties": {
        "created_at": {
          "$ref": "#/definitions/Timestamp"
        },
        "fingerprint": {
          "type": "string",
          "x-go-name": "Fingerprint"
        },
        "life_time": {
          "$ref": "#/definitions/Duration"
        },
        "part_token_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "PartTokenId"
        },
        "platform": {
          "type": "string",
          "x-go-name": "Platform"
        },
        "raw_refresh_token": {
          "type": "string",
          "x-go-name": "RawRefreshToken"
        },
        "rw_access": {
          "type": "boolean",
          "x-go-name": "RwAccess"
        },
        "token_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TokenId"
        },
        "user_agent": {
          "type": "string",
          "x-go-name": "UserAgent"
        },
        "user_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "UserId"
        },
        "user_ip": {
          "type": "string",
          "format": "ip",
          "x-go-name": "UserIp"
        },
        "user_namespace": {
          "type": "string",
          "x-go-name": "UserNamespace"
        },
        "user_role": {
          "type": "string",
          "x-go-name": "UserRole"
        },
        "user_volume": {
          "type": "string",
          "x-go-name": "UserVolume"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/auth/proto"
    },
    "StoredTokenForUser": {
      "description": "StoredTokenForUser is an information about token sent to user",
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "ip": {
          "description": "@inject_tag: binding:\"ip\"",
          "type": "string",
          "format": "ip",
          "x-go-name": "Ip"
        },
        "token_id": {
          "description": "@inject_tag: binding:\"uuid\"",
          "type": "string",
          "format": "uuid",
          "x-go-name": "TokenId"
        },
        "user_agent": {
          "type": "string",
          "x-go-name": "UserAgent"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/auth/proto"
    },
    "SubscribeTariffRequest": {
      "description": "SubscribeTariffRequest contains parameters needed for tariff subscribing",
      "type": "object",
      "properties": {
        "resource_id": {
          "type": "string",
          "x-go-name": "ResourceID"
        },
        "resource_label": {
          "type": "string",
          "x-go-name": "ResourceLabel"
        },
        "resource_type": {
          "$ref": "#/definitions/ResourceType"
        },
        "tariff_id": {
          "type": "string",
          "x-go-name": "TariffID"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/bill-external/models"
    },
    "Timestamp": {
      "description": "# Examples\n\nExample 1: Compute Timestamp from POSIX `time()`.\n\nTimestamp timestamp;\ntimestamp.set_seconds(time(NULL));\ntimestamp.set_nanos(0);\n\nExample 2: Compute Timestamp from POSIX `gettimeofday()`.\n\nstruct timeval tv;\ngettimeofday(\u0026tv, NULL);\n\nTimestamp timestamp;\ntimestamp.set_seconds(tv.tv_sec);\ntimestamp.set_nanos(tv.tv_usec * 1000);\n\nExample 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n\nFILETIME ft;\nGetSystemTimeAsFileTime(\u0026ft);\nUINT64 ticks = (((UINT64)ft.dwHighDateTime) \u003c\u003c 32) | ft.dwLowDateTime;\n\nA Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\nis 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\nTimestamp timestamp;\ntimestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\ntimestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n\nExample 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n\nlong millis = System.currentTimeMillis();\n\nTimestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n.setNanos((int) ((millis % 1000) * 1000000)).build();\n\n\nExample 5: Compute Timestamp from current time in Python.\n\ntimestamp = Timestamp()\ntimestamp.GetCurrentTime()\n\n# JSON Mapping\n\nIn JSON format, the Timestamp type is encoded as a string in the\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\nformat is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\nwhere {year} is always expressed using four digits while {month}, {day},\n{hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\nseconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\nare optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\nis required, though only UTC (as indicated by \"Z\") is presently supported.\n\nFor example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n01:30 UTC on January 15, 2017.\n\nIn JavaScript, one can convert a Date object to this format using the\nstandard [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString]\nmethod. In Python, a standard `datetime.datetime` object can be converted\nto this format using [`strftime`](https://docs.python.org/2/library/time.html#time.strftime)\nwith the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one\ncan use the Joda Time's [`ISODateTimeFormat.dateTime()`](\nhttp://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime--)\nto obtain a formatter capable of generating timestamps in this format.",
      "type": "object",
      "title": "A Timestamp represents a point in time independent of any time zone\nor calendar, represented as seconds and fractions of seconds at\nnanosecond resolution in UTC Epoch time. It is encoded using the\nProleptic Gregorian Calendar which extends the Gregorian calendar\nbackwards to year one. It is encoded assuming all minutes are 60\nseconds long, i.e. leap seconds are \"smeared\" so that no leap second\ntable is needed for interpretation. Range is from\n0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.\nBy restricting to that range, we ensure that we can convert to\nand from  RFC 3339 date strings.\nSee [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).",
      "properties": {
        "nanos": {
          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Nanos"
        },
        "seconds": {
          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Seconds"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/golang/protobuf/ptypes/timestamp"
    },
    "UpdateAccessRequest": {
      "type": "object",
      "title": "UpdateAccessRequest describes request for updating user resources accesses.",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateAccessRequestElement"
          },
          "x-go-name": "Users"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/auth/proto"
    },
    "UpdateAccessRequestElement": {
      "type": "object",
      "title": "UpdateAccessRequestElement describes element for updating user resources accesses.",
      "properties": {
        "access": {
          "$ref": "#/definitions/ResourcesAccess"
        },
        "user_id": {
          "description": "@inject_tag: binding:\"uuid\"",
          "type": "string",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/auth/proto"
    },
    "UpdateImage": {
      "description": "UpdateImage -- model for update container image request",
      "type": "object",
      "required": [
        "container_name",
        "image"
      ],
      "properties": {
        "container_name": {
          "type": "string",
          "x-go-name": "Container"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "UpdateNamespaceName": {
      "description": "UpdateNamespaceName -- contains new namespace label",
      "type": "object",
      "required": [
        "label"
      ],
      "properties": {
        "label": {
          "type": "string",
          "x-go-name": "Label"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "UpdateReplicas": {
      "description": "UpdateReplicas -- contains new number of replicas",
      "type": "object",
      "required": [
        "replicas"
      ],
      "properties": {
        "replicas": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Replicas"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "UpdateStorageRequest": {
      "description": "UpdateStorageRequest represents request object for updating storage",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Used"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/volume-manager/pkg/models"
    },
    "User": {
      "description": "User -- user model",
      "type": "object",
      "properties": {
        "access": {
          "type": "string",
          "x-go-name": "Access"
        },
        "accounts": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Accounts"
        },
        "blacklisted_at": {
          "type": "string",
          "x-go-name": "BlacklistedAt"
        },
        "created_at": {
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "data": {
          "$ref": "#/definitions/UserData"
        },
        "deleted_at": {
          "type": "string",
          "x-go-name": "DeletedAt"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "is_active": {
          "type": "boolean",
          "x-go-name": "IsActive"
        },
        "is_deleted": {
          "type": "boolean",
          "x-go-name": "IsDeleted"
        },
        "is_in_blacklist": {
          "type": "boolean",
          "x-go-name": "IsInBlacklist"
        },
        "login": {
          "type": "string",
          "x-go-name": "Login"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "referral": {
          "type": "string",
          "x-go-name": "Referral"
        },
        "role": {
          "type": "string",
          "x-go-name": "Role"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "UserAccess": {
      "type": "object",
      "properties": {
        "access_level": {
          "$ref": "#/definitions/AccessLevel"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "UserData": {
      "description": "UserData -- user profile data",
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "UserGroup": {
      "$ref": "#/definitions/userGroupOAIGen"
    },
    "UserGroupAccess": {
      "type": "string",
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "UserGroupMember": {
      "description": "UserGroupMember -- group member",
      "type": "object",
      "properties": {
        "access": {
          "$ref": "#/definitions/UserGroupAccess"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "UserGroupMembers": {
      "description": "UserGroupMembers -- list of user group members",
      "type": "object",
      "properties": {
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroupMember"
          },
          "x-go-name": "Members"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "UserGroups": {
      "description": "UserGroups -- list of user groups",
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroup"
          },
          "x-go-name": "Groups"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "UserHeaderData": {
      "description": "represents header data for X-User-Namespace and X-User-Volume headers (encoded in base64)",
      "type": "object",
      "required": [
        "id",
        "label",
        "access"
      ],
      "properties": {
        "access": {
          "$ref": "#/definitions/AccessLevel"
        },
        "id": {
          "description": "hosting-internal name",
          "type": "string",
          "x-go-name": "ID"
        },
        "label": {
          "description": "user-visible label for the object",
          "type": "string",
          "x-go-name": "Label"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "UserList": {
      "description": "UserList -- users list",
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          },
          "x-go-name": "Users"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "UserLogin": {
      "description": "UserList -- model for user login, password and id",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "login": {
          "type": "string",
          "x-go-name": "Login"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/user-manager/pkg/models"
    },
    "UserSolution": {
      "description": "UserSolution -- running solution",
      "type": "object",
      "required": [
        "template",
        "name",
        "namespace"
      ],
      "properties": {
        "branch": {
          "type": "string",
          "x-go-name": "Branch"
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Env"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "namespace": {
          "type": "string",
          "x-go-name": "Namespace"
        },
        "template": {
          "type": "string",
          "x-go-name": "Template"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "UserSolutionsList": {
      "description": "UserSolutionsList -- list of running solution",
      "type": "object",
      "properties": {
        "solutions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserSolution"
          },
          "x-go-name": "Solutions"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "Version": {
      "description": "Version represents a semver compatible version",
      "type": "object",
      "properties": {
        "Build": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Major": {
          "type": "integer",
          "format": "uint64"
        },
        "Minor": {
          "type": "integer",
          "format": "uint64"
        },
        "Patch": {
          "type": "integer",
          "format": "uint64"
        },
        "Pre": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PRVersion"
          }
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/blang/semver"
    },
    "Volume": {
      "description": "Volume -- volume representation",
      "type": "object",
      "properties": {
        "access": {
          "$ref": "#/definitions/AccessLevel"
        },
        "access_mode": {
          "$ref": "#/definitions/PersistentVolumeAccessMode"
        },
        "capacity": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Capacity"
        },
        "created_at": {
          "description": "creation date in RFC3339 format",
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "deleted_at": {
          "type": "string",
          "x-go-name": "DeletedAt"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "owner_login": {
          "type": "string",
          "x-go-name": "OwnerLogin"
        },
        "status": {
          "description": "delete date in RFC3339 format",
          "type": "string",
          "x-go-name": "Status"
        },
        "storage_name": {
          "type": "string",
          "x-go-name": "StorageName"
        },
        "tariff_id": {
          "type": "string",
          "x-go-name": "TariffID"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserAccess"
          },
          "x-go-name": "Users"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "VolumeCreateRequest": {
      "description": "VolumeCreateRequest is a request object for creating volume",
      "$ref": "#/definitions/CreateVolume"
    },
    "VolumeRenameRequest": {
      "description": "VolumeRenameRequest is a request object for renaming volume",
      "$ref": "#/definitions/ResourceUpdateName"
    },
    "VolumeResizeRequest": {
      "description": "VolumeResizeRequest contains parameters for changing volume size",
      "type": "object",
      "properties": {
        "tariff_id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "TariffID"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/volume-manager/pkg/models"
    },
    "VolumeTariff": {
      "description": "VolumeTariff represents billing tariff for (persistent) volume",
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "is_active": {
          "type": "boolean",
          "x-go-name": "Active"
        },
        "is_public": {
          "type": "boolean",
          "x-go-name": "Public"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "price": {
          "type": "number",
          "format": "double",
          "x-go-name": "Price"
        },
        "replicas_limit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ReplicasLimit"
        },
        "storage_limit": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StorageLimit"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/bill-external/models"
    },
    "VolumesList": {
      "description": "VolumesList -- model for volumes list",
      "type": "object",
      "properties": {
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Volume"
          },
          "x-go-name": "Volumes"
        }
      },
      "x-go-package": "git.containerum.net/ch/permissions/vendor/github.com/containerum/kube-client/pkg/model"
    },
    "authClient": {
      "type": "object",
      "x-go-package": "git.containerum.net/ch/permissions/vendor/git.containerum.net/ch/auth/proto"
    },
    "errOAIGen": {
      "description": "Err -- standard serializable API error\nMessage -- constant error message:\n+ \"invalid username\"\n+ \"quota exceeded\"\n+ \"validation error\"\n...etc...\nID -- unique error identification code\nDetails -- optional context error messages kinda\n+ \"field 'Replicas' must be non-zero value\"\n+ \"not enough tights to feed gopher\"\n+ \"resource 'God' does't exist\"\nFields -- optional set of key-value pairs",
      "type": "object",
      "properties": {
        "details": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Details"
        },
        "fields": {
          "description": "Fields -- represents additional key-value fields of error",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-package": "github.com/containerum/cherry"
        },
        "id": {
          "$ref": "#/definitions/errOaiGenId"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "status_http": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StatusHTTP"
        }
      },
      "x-go-package": "github.com/containerum/cherry"
    },
    "errOaiGenId": {
      "description": "ErrID -- represents unique error ID",
      "type": "object",
      "properties": {
        "kind": {
          "description": "ErrKind -- represents kind of error",
          "type": "integer",
          "format": "uint64",
          "x-go-package": "github.com/containerum/cherry"
        },
        "sid": {
          "description": "ErrSID -- represents service ID of error",
          "type": "string",
          "x-go-package": "github.com/containerum/cherry"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/containerum/cherry"
    },
    "getAllNamespacesOKBody": {
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Namespace"
          }
        }
      },
      "x-go-gen-location": "operations"
    },
    "getProjectGroupsOKBody": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroup"
          }
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUserNamespacesOKBody": {
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Namespace"
          }
        }
      },
      "x-go-gen-location": "operations"
    },
    "namespaceOAIGen": {
      "description": "Namespace -- namespace representation",
      "type": "object",
      "required": [
        "resources"
      ],
      "properties": {
        "access": {
          "type": "string",
          "x-go-package": "github.com/containerum/kube-client/pkg/model"
        },
        "created_at": {
          "description": "creation date in RFC3339 format",
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "label": {
          "description": "user-visible label for the namespace",
          "type": "string",
          "x-go-name": "Label"
        },
        "max_ext_service": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxExtService"
        },
        "max_int_service": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxIntService"
        },
        "max_traffic": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MaxTraffic"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "owner_login": {
          "type": "string",
          "x-go-name": "OwnerLogin"
        },
        "resources": {
          "$ref": "#/definitions/namespaceOaiGenResources"
        },
        "tariff_id": {
          "type": "string",
          "x-go-name": "TariffID"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/namespaceOaiGenUsersItems"
          },
          "x-go-name": "Users"
        }
      },
      "x-go-package": "github.com/containerum/kube-client/pkg/model"
    },
    "namespaceOaiGenResources": {
      "type": "object",
      "title": "Resources -- represents namespace limits and user resources.",
      "required": [
        "hard"
      ],
      "properties": {
        "hard": {
          "$ref": "#/definitions/namespaceOaiGenResourcesHard"
        },
        "used": {
          "$ref": "#/definitions/namespaceOaiGenResourcesUsed"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/containerum/kube-client/pkg/model"
    },
    "namespaceOaiGenResourcesHard": {
      "description": "Resource -- represents namespace CPU and RAM",
      "type": "object",
      "required": [
        "cpu",
        "memory"
      ],
      "properties": {
        "cpu": {
          "description": "CPU in m",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CPU"
        },
        "memory": {
          "description": "RAM in Mi",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Memory"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/containerum/kube-client/pkg/model"
    },
    "namespaceOaiGenResourcesUsed": {
      "description": "Resource -- represents namespace CPU and RAM",
      "type": "object",
      "required": [
        "cpu",
        "memory"
      ],
      "properties": {
        "cpu": {
          "description": "CPU in m",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "CPU"
        },
        "memory": {
          "description": "RAM in Mi",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Memory"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/containerum/kube-client/pkg/model"
    },
    "namespaceOaiGenUsersItems": {
      "type": "object",
      "properties": {
        "access_level": {
          "type": "string",
          "x-go-package": "github.com/containerum/kube-client/pkg/model"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/containerum/kube-client/pkg/model"
    },
    "resourceUpdateNameOAIGen": {
      "description": "ResourceUpdateName -- contains new resource name",
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "x-go-name": "Label"
        }
      },
      "x-go-package": "github.com/containerum/kube-client/pkg/model"
    },
    "resourceUpdateUserAccessOAIGen": {
      "description": "ResourceUpdateUserAccess -- contains user access data",
      "type": "object",
      "properties": {
        "access": {
          "type": "string",
          "x-go-package": "github.com/containerum/kube-client/pkg/model"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/containerum/kube-client/pkg/model"
    },
    "resourcesAccessOAIGen": {
      "description": "ResourceAccesses contains user accesses to resources",
      "type": "object",
      "properties": {
        "namespace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesAccessOaiGenNamespaceItems"
          },
          "x-go-name": "Namespace"
        },
        "volume": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/resourcesAccessOaiGenVolumeItems"
          },
          "x-go-name": "Volume"
        }
      },
      "x-go-package": "git.containerum.net/ch/auth/proto"
    },
    "resourcesAccessOaiGenNamespaceItems": {
      "description": "AccessObject represents user access to resource",
      "type": "object",
      "properties": {
        "access": {
          "type": "string",
          "x-go-name": "Access"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "git.containerum.net/ch/auth/proto"
    },
    "resourcesAccessOaiGenVolumeItems": {
      "description": "AccessObject represents user access to resource",
      "type": "object",
      "properties": {
        "access": {
          "type": "string",
          "x-go-name": "Access"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "x-go-name": "Id"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "git.containerum.net/ch/auth/proto"
    },
    "userGroupOAIGen": {
      "description": "UserGroup -- group of users",
      "type": "object",
      "properties": {
        "access": {
          "type": "string",
          "x-go-package": "github.com/containerum/kube-client/pkg/model"
        },
        "created_at": {
          "description": "creation date in RFC3339 format",
          "type": "string",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userGroupOaiGenMembersItems"
          },
          "x-go-name": "Members"
        },
        "members_count": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "MembersCount"
        },
        "owner_login": {
          "type": "string",
          "x-go-name": "OwnerLogin"
        },
        "owner_user_id": {
          "type": "string",
          "x-go-name": "OwnerID"
        }
      },
      "x-go-package": "github.com/containerum/kube-client/pkg/model"
    },
    "userGroupOaiGenMembersItems": {
      "description": "UserGroupMember -- group member",
      "type": "object",
      "properties": {
        "access": {
          "type": "string",
          "x-go-package": "github.com/containerum/kube-client/pkg/model"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-gen-location": "models",
      "x-go-package": "github.com/containerum/kube-client/pkg/model"
    }
  },
  "parameters": {
    "Filters": {
      "type": "string",
      "description": "A set of filters separated with comma. See \"dao\" package for more information.",
      "name": "filter",
      "in": "query"
    },
    "GroupID": {
      "type": "string",
      "format": "uuid",
      "description": "Group ID",
      "name": "group",
      "in": "path",
      "required": true
    },
    "PageNum": {
      "minimum": 0,
      "type": "integer",
      "name": "page",
      "in": "query"
    },
    "PerPageLimit": {
      "minimum": 0,
      "type": "integer",
      "name": "per_page",
      "in": "query"
    },
    "ProjectID": {
      "type": "string",
      "format": "uuid",
      "description": "Project ID",
      "name": "project",
      "in": "path",
      "required": true
    },
    "ResourceID": {
      "type": "string",
      "format": "uuid",
      "description": "Resource ID",
      "name": "id",
      "in": "path",
      "required": true
    },
    "SubstitutedUserID": {
      "type": "string",
      "format": "uuid",
      "description": "The ID of the of the user on behalf of which the administrator can perform the action",
      "name": "user-id",
      "in": "query"
    },
    "UserIDHeader": {
      "type": "string",
      "format": "uuid",
      "name": "X-User-ID",
      "in": "header",
      "required": true
    },
    "UserRoleHeader": {
      "enum": [
        "user",
        "admin"
      ],
      "type": "string",
      "name": "X-User-Role",
      "in": "header",
      "required": true
    }
  },
  "responses": {
    "error": {
      "description": "cherry error",
      "schema": {
        "$ref": "#/definitions/errOAIGen"
      }
    }
  }
}